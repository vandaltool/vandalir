//enumerates 0 until limit, maximum limit: 100000

//ok, do not use this!
//use NUM>=0, NUM<LIM, anumber(NUM) instead for better performance!
.decl enumerate(number: number, limit: number)
enumerate(NUM, LIM) :- NUM=0, anumber(LIM).
enumerate(NUM, LIM) :- NUM>0, NUM<LIM, anumber(LIM), anumber(NUM).

//enforces number is even (use only for small numbers, due to anumber usage)
.decl is_even(number: number)
is_even(NUM) :- NUM%2=0, anumber(NUM).

//enforces number is uneven (use only for small numbers, due to anumber usage)
.decl is_uneven(number: number)
is_uneven(NUM) :- NUM%2=1, anumber(NUM).


//checks if globaltype of global is available to other implementations (in library mode)
.decl is_external_global_type(globaltype: symbol)
is_external_global_type(GT) :- GT = "global". 
is_external_global_type(GT) :- GT = "common_global". 
is_external_global_type(GT) :- GT = "external_global". 

//contains all letters of the alphabet 
.decl alowercaseletter(x: symbol)
alowercaseletter("a").
alowercaseletter("b").
alowercaseletter("c").
alowercaseletter("d").
alowercaseletter("e").
alowercaseletter("f").
alowercaseletter("g").
alowercaseletter("h").
alowercaseletter("i").
alowercaseletter("j").
alowercaseletter("k").
alowercaseletter("l").
alowercaseletter("m").
alowercaseletter("n").
alowercaseletter("o").
alowercaseletter("p").
alowercaseletter("q").
alowercaseletter("r").
alowercaseletter("s").
alowercaseletter("t").
alowercaseletter("u").
alowercaseletter("v").
alowercaseletter("w").
alowercaseletter("x").
alowercaseletter("y").
alowercaseletter("z").

