//types
.type _functionid <: number
.type _blockid <: number
.type _argumentid <: number
.type _instructionid <: number
.type _operandid <: number
.type _structid <: number
.type _structoperandid <: number
.type _label <: symbol
.type _vreg <: symbol
.type _memcategory <: symbol
.type _arrayid <: number


.decl type(type: symbol)
type(T) :-
    T = OV,
    operand(_,_,OV).


.decl opval(type: symbol)
//.output opval

opval(T) :-
    T = OV,
    strlen(T) > 0,
    operand(_,_,OV).

opval(T) :-
    T = OV,
    strlen(T) > 0,
    structoperand(_,_,_,OV).


//inputs

.decl function(functionid: _functionid,
               functionname: symbol,
               functiontype: symbol,
               returntype: symbol)
.input function(delimiter=";")


.decl argument(functionid: _functionid,
               argumentid: _argumentid,
               vreg: _vreg,
               argumenttype: symbol)
.input argument(delimiter=";")


.decl block(functionid: _functionid,
            blockid: _blockid,
            label: _label)
.input block(delimiter=";")


.decl predecessor(functionid: _functionid,
                  label: _label,
                  predecessor: _label)
.input predecessor(delimiter=";")


.decl instruction(blockid: _blockid,
                  instructionid: _instructionid,
                  virtualregister: _vreg,
                  opcode: symbol)
.input instruction(delimiter=";")


.decl operand(instructionid: _instructionid,
              operandid: _operandid,
              operandvalue: symbol)
.input operand(delimiter=";")


.decl global(name: symbol,
             globaltype: symbol,
             type: symbol,
             size: symbol,
             value: symbol)
.input global(delimiter=";")


.decl struct(structid: _structid, name: symbol, size: number)
.input struct(delimiter=";")


.decl structoperand(structid: _structid,
                    structoperandid: _structoperandid,
                    type: symbol,
                    size: symbol)
.input structoperand(delimiter=";")


.decl userinput(functionname: symbol,
                argnumber: number,
                mode: symbol,
                limit: number)
.input userinput(delimiter=";")


//this contains all numbers 0-100k, used for enumerations
.decl anumber(number: number)
.input anumber(delimiter=";")

.decl array(instructionid: _instructionid,
            arrayid: _arrayid,
            type: symbol,
            size: number,
            vreg: symbol)
.input array(delimiter=";")