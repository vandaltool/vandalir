// detect buffer overflows within loops
.decl bo_in_loops(instructionid: _instructionid, level: symbol, message: symbol)

bo_in_loops(IID, LEVEL, MESSAGE) :-
    is_loop_with_duplicate_increase(IID, LEVEL, MESSAGE).

bo_in_loops(IID, LEVEL, MESSAGE) :-
    oob_array_access_in_loop(IID, LEVEL, MESSAGE).


// detect out of bounds array access of index, which is loop variable e.g. arr[i]
.decl oob_array_access_in_loop(instructionid: _instructionid, level: symbol, message: symbol)

// case head-controlled <x boundary
oob_array_access_in_loop(IID, LEVEL, MESSAGE) :-
    // get loop
    loop(FID, CB, TYPE),
    TYPE = "head-controlled",
    loopCondition(FID, LASTBLOCK, CB, _, TYPE),
    loop_variable(CB, FID, LOOPVAR),

    instruction(CB, COMPINSTRUCTION, _, "icmp"),
    get_first_operand(COMPINSTRUCTION, COND),
    smaller_condition(COND),
    get_second_operand(COMPINSTRUCTION, VARIABLE),
    get_third_operand(COMPINSTRUCTION, VALUE),

    memequals(FID, LOOPVAR, FID, VARIABLE),
    get_int_by_vreg(MAXBOUNDARY_TEMP, FID, VALUE),
    MAXBOUNDARY = (MAXBOUNDARY_TEMP-1),
    // get array access
    instruction(GEPBID, GEPIID, _, OPC),
    OPC="getelementptr",
    block(FID, GEPBID, _),
    get_first_operand(GEPIID, ARRAY),
    get_ith_operand(GEPIID, I, VAL),
    I>1,
    is_vreg(VAL),
    memequals(FID, VAL, FID, LOOPVAR),

    downwardPath(FID, CB, LASTBLOCK),
    blockInDownwardPath(FID, CB, LASTBLOCK, GEPBID),
    // loop boundary larger than arraysize
    ARRAYSIZE = max ASIZE : get_buffsize_by_vreg(ASIZE, FID, ARRAY),
    ARRAYSIZE-1 < MAXBOUNDARY,
    IID = GEPIID,
    ARRAYSIZE > 2,
    LEVEL = "Vulnerability",
    MESSAGE = cat("Array access within a loop with the loop variable [arr[i]] is out of bounds for i=",to_string(MAXBOUNDARY)," and array size: ", to_string(ARRAYSIZE),".").

// case head-controlled <=x boundary
oob_array_access_in_loop(IID, LEVEL, MESSAGE) :-
    // get loop
    loop(FID, CB, TYPE),
    TYPE = "head-controlled",
    loopCondition(FID, LASTBLOCK, CB, _, TYPE),
    loop_variable(CB, FID, LOOPVAR),

    instruction(CB, COMPINSTRUCTION, _, "icmp"),
    get_first_operand(COMPINSTRUCTION, COND),
    smaller_equal_condition(COND),
    get_second_operand(COMPINSTRUCTION, VARIABLE),
    get_third_operand(COMPINSTRUCTION, VALUE),

    memequals(FID, LOOPVAR, FID, VARIABLE),
    get_int_by_vreg(MAXBOUNDARY_TEMP, FID, VALUE),
    MAXBOUNDARY = (MAXBOUNDARY_TEMP),
    // get array access
    instruction(GEPBID, GEPIID, _, OPC),
    OPC="getelementptr",
    block(FID, GEPBID, _),
    get_first_operand(GEPIID, ARRAY),
    get_ith_operand(GEPIID, I, VAL),
    I>1,
    is_vreg(VAL),
    memequals(FID, VAL, FID, LOOPVAR),

    downwardPath(FID, CB, LASTBLOCK),
    blockInDownwardPath(FID, CB, LASTBLOCK, GEPBID),
    // loop boundary larger than arraysize
    get_buffsize_by_vreg(ARRAYSIZE, FID, ARRAY),
    ARRAYSIZE-1 < MAXBOUNDARY,
    ARRAYSIZE > 2,
    IID = GEPIID,

    LEVEL = "Vulnerability",
    MESSAGE = cat("Array access within a loop with the loop variable [arr[i]] is out of bounds for i=",to_string(MAXBOUNDARY)," and array size: ", to_string(ARRAYSIZE),".").


// detect duplicate variable increase
.decl is_loop_with_duplicate_increase(loopConditionInstruction: _instructionid, level: symbol, message: symbol)
//.output is_loop_with_duplicate_increase(delimiter=",")

// case head-controlled
is_loop_with_duplicate_increase(CBIID, LEVEL, MESSAGE) :-
    TYPE = "head-controlled",
    loop(FID, CB, TYPE),
    loopCondition(FID, LASTBLOCK, CB, CBIID, TYPE),
    instruction(CB, CBIID, _, _),
    downwardPath(FID, CB, LASTBLOCK),
    blockInDownwardPath(FID, CB, LASTBLOCK, BLOCK),
    // BLOCK1 and BLOCK2 may be the same
    blockInDownwardPath(FID, CB, LASTBLOCK, BLOCK2),
    loop_variable(CB, FID, VAR),
    // first increase instruction
    is_increase_variable_instruction_of_variable(BLOCK, IID, VAR),
    // second increase instruction
    is_increase_variable_instruction_of_variable(BLOCK2, IID2, VAR),
    IID != IID2,
    MESSAGE = "duplicate loop variable increase in loop may result in memory error",
    LEVEL = "Vulnerability".

// case foot-controlled
is_loop_with_duplicate_increase(CBIID, LEVEL, MESSAGE) :-
    TYPE = "foot-controlled",
    loop(FID, CB, TYPE),
    loopCondition(FID, CB, FIRSTBLOCK, CBIID, TYPE),
    instruction(CB, CBIID, _, _),
    downwardPath(FID, FIRSTBLOCK, CB),
    blockInDownwardPath(FID, FIRSTBLOCK, CB, BLOCK),
    // BLOCK1 and BLOCK2 may be the same
    blockInDownwardPath(FID, FIRSTBLOCK, CB, BLOCK2),
    loop_variable(CB, FID, VAR),
    // first increase instruction
    is_increase_variable_instruction_of_variable(BLOCK, IID, VAR),
    // second increase instruction
    is_increase_variable_instruction_of_variable(BLOCK2, IID2, VAR),
    IID != IID2,
    MESSAGE = "duplicate loop variable increase in loop may result in memory error",
    LEVEL = "Vulnerability".


// the pointer which the loop iterates through is increased in one path within the loop more than once
.decl is_increase_variable_instruction_of_variable(blockid: _blockid, instructionid: _instructionid, variable: symbol)
//.output is_increase_variable_instruction_of_variable(delimiter=",")
is_increase_variable_instruction_of_variable(BID, IID, VAR) :-
    instruction(BID, IID, _, OPC),
    OPC = "getelementptr",
    get_first_operand(IID, VREG),
    get_second_operand(IID, INDEX),
    is_numeric(INDEX),
    INDEX != "0",
    memequals(FID, VREG, FID, VAR),
    loop_variable(_, FID, VAR).
