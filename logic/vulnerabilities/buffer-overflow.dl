// all buffer overflows
.decl buffer_overflow(instructionid: _instructionid, level: symbol, message: symbol)

buffer_overflow(IID, LEVEL, MESSAGE) :-
    is_vulnerable_strncpy_call_instruction(IID, LEVEL, MESSAGE).

buffer_overflow(IID, LEVEL, MESSAGE) :-
    is_vulnerable_fgets_call_instruction(IID, LEVEL, MESSAGE).

buffer_overflow(IID, LEVEL, MESSAGE) :-
    is_vulnerable_snprintf_call_instruction(IID, LEVEL, MESSAGE).

buffer_overflow(IID, LEVEL, MESSAGE) :-
    is_vulnerable_sprintf_call_instruction(IID, LEVEL, MESSAGE).

buffer_overflow(IID, LEVEL, MESSAGE) :-
    is_vulnerable_memcpy_call_instruction(IID, LEVEL, MESSAGE).

buffer_overflow(IID, LEVEL, MESSAGE) :-
    is_vulnerable_memmove_call_instruction(IID, LEVEL, MESSAGE).

buffer_overflow(IID, LEVEL, MESSAGE) :-
    is_vulnerable_strcpy_call_instruction(IID, LEVEL, MESSAGE).

buffer_overflow(IID, LEVEL, MESSAGE) :-
    is_vulnerable_wscpy_call_instruction(IID, LEVEL, MESSAGE).

buffer_overflow(IID, LEVEL, MESSAGE) :-
    is_vulnerable_strcat_call_instruction(IID, LEVEL, MESSAGE).

buffer_overflow(IID, LEVEL, MESSAGE) :-
    is_vulnerable_strncat_call_instruction(IID, LEVEL, MESSAGE).


// strncpy vulnerable to bo
.decl is_vulnerable_strncpy_call_instruction(instructionid: _instructionid,
                                             level: symbol,
                                             message: symbol)
is_vulnerable_strncpy_call_instruction(IID, LEVEL, MESSAGE) :-
    is_strncpy_call_instruction(IID),
    block(FID, BID, _),
    instruction(BID, IID, _, _),
    get_first_operand(IID, OV1),
    get_third_operand(IID, N),
    get_buffsize_by_vreg(DEST_SIZE, FID, OV1),
    get_int_by_vreg(COPY_SIZE, FID, N),
    MESSAGE = cat(cat(cat("strncpy: possible insufficient buffer size ", to_string(DEST_SIZE)), " for n of size "), to_string(COPY_SIZE)),
    LEVEL = "Vulnerability",
    DEST_SIZE > 2, // this eliminates many false positives
    DEST_SIZE < COPY_SIZE.


// fgets vulnerable to bo
.decl is_vulnerable_fgets_call_instruction(instructionid: _instructionid,
                                           level: symbol,
                                           message: symbol)
is_vulnerable_fgets_call_instruction(IID, LEVEL, MESSAGE) :-
    is_fgets_call_instruction(IID),
    block(FID, BID, _),
    instruction(BID, IID, _, _),
    get_first_operand(IID, OV1),
    get_second_operand(IID, N),
    get_buffsize_by_vreg(DEST_SIZE, FID, OV1),
    get_int_by_vreg(COPY_SIZE, FID, N),
    DEST_SIZE > 2, // this eliminates many false positives
    DEST_SIZE < COPY_SIZE,
    MESSAGE = cat(cat(cat("fgets: possible insufficient buffer size ", to_string(DEST_SIZE)), " for n of size "), to_string(COPY_SIZE)),
    LEVEL = "Vulnerability".


// snprintf vulnerable to bo
.decl is_vulnerable_snprintf_call_instruction(instructionid: _instructionid,
                                              level: symbol,
                                              message: symbol)
is_vulnerable_snprintf_call_instruction(IID, LEVEL, MESSAGE) :-
    is_X_call_instruction("snprintf", IID),
    block(FID, BID, _),
    instruction(BID, IID, _, _),
    get_first_operand(IID, DEST),
    get_second_operand(IID, N),
    get_buffsize_by_vreg(DEST_SIZE, FID, DEST),
    get_int_by_vreg(COPY_SIZE, FID, N),
    DEST_SIZE > 2, // this eliminates many false positives
    DEST_SIZE < COPY_SIZE,
    LEVEL = "Vulnerability",
    MESSAGE = cat(cat(cat("snprintf: possible insufficient buffer size ", to_string(DEST_SIZE)), " for n of size "), to_string(COPY_SIZE)).


// sprintf vulnerable to bo
.decl is_vulnerable_sprintf_call_instruction(instructionid: _instructionid,
                                             level: symbol,
                                             message: symbol)
//.output is_vulnerable_sprintf_call_instruction

// case %str in format string, no other %
// TODO: add case with non numeric GLOBSIZESTR e.g. (2x12)
is_vulnerable_sprintf_call_instruction(IID, LEVEL, MESSAGE) :-
    is_X_call_instruction("sprintf", IID),
    block(FID, BID, _),
    instruction(BID, IID, _, _),
    get_first_operand(IID, DEST),
    get_third_operand(IID, SRC),
    // get_second_operand(IID, FORMATSTR_GEP),
/*
    instruction(_, IID_GEP, FORMATSTR_GEP, "getelementptr"),
    get_first_operand(IID_GEP, FORMATSTR_GLOB),
    is_global(FORMATSTR_GLOB),
    global(FORMATSTR_GLOB, _, _, GLOBSIZESTR, FORMATSTR),
    is_numeric(GLOBSIZESTR),
    GLOBSIZE = to_number(GLOBSIZESTR),
    contains("%s", FORMATSTR),
*/
    get_buffsize_by_vreg(SRC_SIZE, FID, SRC),
    get_buffsize_by_vreg(DEST_SIZE, FID, DEST),
    DEST_SIZE > 2, // this eliminates many false positives
    FINAL_DEST_SIZE = DEST_SIZE, //-(GLOBSIZE-3), //3= %s\00
    FINAL_DEST_SIZE < SRC_SIZE,
    LEVEL = "Vulnerability",
    MESSAGE = cat(cat(cat("sprintf(dest %s src): possible insufficient buffer size ", to_string(DEST_SIZE)), " for source of size "), to_string(SRC_SIZE)).


// memcpy vulnerable to bo
.decl is_vulnerable_memcpy_call_instruction(instructionid: _instructionid,
                                            level: symbol,
                                            message: symbol)
// case default (char array)
is_vulnerable_memcpy_call_instruction(IID, LEVEL, MESSAGE) :-
    is_memcpy_call_instruction(IID),
    block(FID, BID, _),
    instruction(BID, IID, _, _),
    get_first_operand(IID, DEST),
    get_third_operand(IID, N),
    DEST_SIZE = max DS : get_buffsize_by_vreg(DS, FID, DEST),
    get_int_by_vreg(COPY_SIZE, FID, N),
    MESSAGE = cat(cat(cat("memcpy: possible insufficient buffer size ", to_string(DEST_SIZE)), " for n of size "), to_string(COPY_SIZE)),
    LEVEL = "Vulnerability",
    DEST_SIZE > 2, // this eliminates many false positives
    DEST_SIZE < COPY_SIZE.

// case src=size=maxint
is_vulnerable_memcpy_call_instruction(IID, LEVEL, MESSAGE) :-
    is_memcpy_call_instruction(IID),
    block(FID, BID, _),
    instruction(BID, IID, _, _),
    get_second_operand(IID, SRC),
    get_third_operand(IID, N),
    SRC_SIZE = max SS : get_buffsize_by_vreg(SS, FID, SRC),
    get_int_by_vreg(COPY_SIZE, FID, N),
    COPY_SIZE = MAXINT,
    SRC_SIZE = MAXINT,
    MESSAGE = cat("memcpy: possible insufficient buffer size for copy of size ", to_string(MAXINT) ),
    LEVEL = "Vulnerability".


// memmove vulnerable to bo
.decl is_vulnerable_memmove_call_instruction(instructionid: _instructionid,
                                             level: symbol,
                                             message: symbol)
// case default (char array)
is_vulnerable_memmove_call_instruction(IID, LEVEL, MESSAGE) :-
    is_memmove_call_instruction(IID),
    block(FID, BID, _),
    instruction(BID, IID, _, _),
    get_first_operand(IID, DEST),
    get_third_operand(IID, N),
    DEST_SIZE = max DS : get_buffsize_by_vreg(DS, FID, DEST),
    get_int_by_vreg(COPY_SIZE, FID, N),
    MESSAGE = cat(cat(cat("memmove: possible insufficient buffer size ", to_string(DEST_SIZE)), " for n of size "), to_string(COPY_SIZE)),
    LEVEL = "Vulnerability",
    DEST_SIZE > 2, // this eliminates many false positives
    DEST_SIZE < COPY_SIZE.


// strcpy vulnerable to bo
.decl is_vulnerable_strcpy_call_instruction(instructionid: _instructionid,
                                            level: symbol,
                                            message: symbol)
is_vulnerable_strcpy_call_instruction(IID, LEVEL, MESSAGE) :-
    is_strcpy_call_instruction(IID),
    block(FID, BID, _),
    instruction(BID, IID, _, _),
    get_first_operand(IID, DEST),
    get_second_operand(IID, SRC),
    get_buffsize_by_vreg(DEST_SIZE, FID, DEST),
    get_buffsize_by_vreg(SRC_SIZE, FID, SRC),
    MESSAGE = cat(cat(cat(cat("strcpy: possible insufficient buffer size ", to_string(DEST_SIZE)), " for copy of "), to_string(SRC_SIZE)), " sized buffer"),
    LEVEL = "Vulnerability",
    DEST_SIZE > 2, // this eliminates many false positives
    DEST_SIZE < SRC_SIZE.


// wscpy vulnerable to bo
.decl is_vulnerable_wscpy_call_instruction(instructionid: _instructionid,
                                           level: symbol,
                                           message: symbol)
is_vulnerable_wscpy_call_instruction(IID, LEVEL, MESSAGE) :-
    is_wscpy_call_instruction(IID),
    block(FID, BID, _),
    instruction(BID, IID, _, _),
    get_first_operand(IID, DEST),
    get_second_operand(IID, SRC),
    get_buffsize_by_vreg(DEST_SIZE, FID, DEST),
    get_buffsize_by_vreg(SRC_SIZE, FID, SRC),
    MESSAGE = cat(cat(cat(cat("wscpy: possible insufficient buffer size ", to_string(DEST_SIZE)), " for copy of "), to_string(SRC_SIZE)), " sized buffer"),
    LEVEL = "Vulnerability",
    DEST_SIZE > 2, // this eliminates many false positives
    DEST_SIZE < SRC_SIZE.


// strcat vulnerable to bo
// length of source content unknown
.decl is_vulnerable_strcat_call_instruction(instructionid: _instructionid,
                                            level: symbol,
                                            message: symbol)
is_vulnerable_strcat_call_instruction(IID, LEVEL, MESSAGE) :-
    is_X_call_instruction("strcat", IID),
    block(FID, BID, _),
    instruction(BID, IID, _, _),
    get_first_operand(IID, DEST),
    get_second_operand(IID, SRC),
    get_buffsize_by_vreg(DEST_SIZE, FID, DEST),
    get_buffsize_by_vreg(SRC_SIZE, FID, SRC),
    MESSAGE = cat(cat(cat(cat("strcat: possible insufficient buffer size ", to_string(DEST_SIZE)), " for concatenation with "), to_string(SRC_SIZE)), " sized buffer"),
    LEVEL = "Vulnerability",
    DEST_SIZE > 2, // this eliminates many false positives
    DEST_SIZE < SRC_SIZE.


// strncat vulnerable to bo
// length of source content unknown
.decl is_vulnerable_strncat_call_instruction(instructionid: _instructionid,
                                             level: symbol,
                                             message: symbol)
is_vulnerable_strncat_call_instruction(IID, LEVEL, MESSAGE) :-
    is_X_call_instruction("strncat", IID),
    block(FID, BID, _),
    instruction(BID, IID, _, _),
    get_first_operand(IID, DEST),
    get_third_operand(IID, N),
    get_buffsize_by_vreg(DEST_SIZE, FID, DEST),
    get_int_by_vreg(CAT_SIZE, FID, N),
    MESSAGE = cat(cat(cat(cat("strncat: possible insufficient buffer size ", to_string(DEST_SIZE)), " for concatenation with "), to_string(CAT_SIZE)), ""),
    LEVEL = "Vulnerability",
    DEST_SIZE > 2, // this eliminates many false positives
    DEST_SIZE < CAT_SIZE.
