//all buffer overflows on array access
.decl bo_in_arrays(instructionid: _instructionid, level: symbol, message: symbol)

bo_in_arrays(IID, LEVEL, MESSAGE) :-
    gep_index_too_big(IID, LEVEL, MESSAGE).

bo_in_arrays(IID, LEVEL, MESSAGE) :-
    gep_index_too_small(IID, LEVEL, MESSAGE).


//access array with too big index
//%21 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i64 0, i64 %20
.decl gep_index_too_big(instructionid: _instructionid, level: symbol, message: symbol)
gep_index_too_big(IID, LEVEL, MESSAGE) :-
    block(FID, BID, _),
    instruction(BID, IID, _, "getelementptr"),
    get_second_operand(IID, INDEX1),
    INDEX1 = "0",
    get_third_operand(IID, INDEX2VREG),
    get_first_operand(IID, DATAOBJ),
    get_int_by_vreg(INDEX2, FID, INDEX2VREG),
    get_buffsize_by_vreg(ARRAYSIZE, FID, DATAOBJ),
    INDEX2 >= ARRAYSIZE,
    !check_big(FID, BID, INDEX2VREG),
    LEVEL = "Vulnerability",
    ARRAYSIZE > 2,
    MESSAGE = cat("possibly insufficient buffer size ", to_string(ARRAYSIZE),
                  " detected for too big index access of ", to_string(INDEX2)).


.decl gep_index_too_small(instructionid: _instructionid, level: symbol, message: symbol)
gep_index_too_small(IID, LEVEL, MESSAGE) :-
    block(FID, BID, _),
    instruction(BID, IID, _, "getelementptr"),
    get_second_operand(IID, INDEX1),
    INDEX1 = "0",
    get_third_operand(IID, INDEX2VREG),
    get_first_operand(IID, DATAOBJ),
    get_int_by_vreg(INDEX2, FID, INDEX2VREG),
    get_buffsize_by_vreg(ARRAYSIZE, FID, DATAOBJ),
    INDEX2 < 0,
    !check_small(FID, BID, INDEX2VREG),
    LEVEL = "Vulnerability",
    ARRAYSIZE > 2,
    MESSAGE = cat("possibly insufficient buffer size ", to_string(ARRAYSIZE),
                  " detected for too small index access (below zero) of ", to_string(INDEX2)).


//check if upper bound size check exists
.decl check_big(functionid: _functionid, blockid: _blockid, vreg: symbol)
check_big(FID, BID, INDEX2VREG) :-
    block(FID, FIRSTBLOCK, "0:"),
    blockInDownwardPath(FID, FIRSTBLOCK, BID, BLOCK),
    check_big_instruction(BLOCK, _, INDEX2VREG).


//check if lower bound size check exists
.decl check_small(functionid: _functionid, blockid: _blockid, vreg: symbol)
check_small(FID, BID, INDEX2VREG) :-
    block(FID, FIRSTBLOCK, "0:"),
    blockInDownwardPath(FID, FIRSTBLOCK, BID, BLOCK),
    check_small_instruction(BLOCK, _, INDEX2VREG).


.decl check_big_instruction(blockid: _blockid, instructionid: _instructionid, vreg: symbol)
//.output check_big_instruction

check_big_instruction(BID, IID, RESVREG) :-
    instruction(BID, IID, _, "icmp"),
    get_first_operand(IID, BOUND),
    upperbound_conditions(BOUND),
    get_second_operand(IID, CONDREG),
    instruction(BID, IIDLOAD, CONDREG, "load"),
    get_last_operand(IIDLOAD, VREGLOAD),
    memequals(FID, VREGLOAD, FID, OTHERVREG),

    block(FID2, BID2, _),
    instruction(BID2, IID2, LOAD2VREG, "load"),
    get_third_operand(IID2, OTHERVREG),
    memequals(FID2, LOAD2VREG, FID2, RESVREG).


.decl check_small_instruction(blockid: _blockid, instructionid: _instructionid, vreg: symbol)
//.output check_small_instruction

check_small_instruction(BID, IID, RESVREG) :-
    instruction(BID, IID, _, "icmp"),
    get_first_operand(IID, BOUND),
    lowerbound_conditions(BOUND),
    get_second_operand(IID, CONDREG),
    instruction(BID, IIDLOAD, CONDREG, "load"),
    get_last_operand(IIDLOAD, VREGLOAD),
    memequals(FID, VREGLOAD, FID, OTHERVREG),

    block(FID2, BID2, _),
    instruction(BID2, IID2, LOAD2VREG, "load"),
    get_third_operand(IID2, OTHERVREG),
    memequals(FID2, LOAD2VREG, FID2, RESVREG).
