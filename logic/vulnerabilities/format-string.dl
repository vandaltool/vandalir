//detect format string attack
.decl format_string_attacks(instructionid: _instructionid, level: symbol, message: symbol)
format_string_attacks(IID, LEVEL, MESSAGE) :- is_vulnerable_format_string_instruction(IID, LEVEL, MESSAGE).

.decl is_vulnerable_format_string_instruction(instructionid: _instructionid, level: symbol, message: symbol)
//.output is_vulnerable_format_string_instruction
//detect userinput in formatstring parameter
is_vulnerable_format_string_instruction(IID, LEVEL, MESSAGE) :-
get_formatstring_arg(FNAME, RELARGNUM),
block(FID, BID, _),
instruction(BID, IID, _, _), 
is_X_call_instruction(FNAME, IID),
get_ith_operand(IID, RELARGNUM, FSLOC),
is_vreg(FSLOC),
is_memloc_with_userinput(FID, FSLOC),
LEVEL = "Vulnerability",
MESSAGE = cat(FNAME," detected and user input is provided to its #", to_string(RELARGNUM), " argument which may indicate a format string vulnerability")
.

//issue warning if the minimal number of regular arguments is not met and critical arg(containing the formatstring) seems to be generated dynamically
//case param is vreg
is_vulnerable_format_string_instruction(IID, LEVEL, MESSAGE) :-
get_formatstring_arg(FNAME, RELARGNUM),
block(FID, BID, _),
instruction(BID, IID, _, _), 
is_X_call_instruction(FNAME, IID),
get_ith_operand(IID, RELARGNUM, FSLOC),
is_vreg(FSLOC),
block(FID, BID2, _),
instruction(BID2, IID2, FSLOC, _),
IID2 > 0, //is a real not an artificial vreg
LEVEL = "Warning",
MESSAGE = cat(FNAME, " detected and its formatstring argument is not static.")
.

//case param is get && get is vreg
//issue warning if the minimal number of regular arguments is not met and critical arg(containing the formatstring) seems to be generated dynamically
is_vulnerable_format_string_instruction(IID, LEVEL, MESSAGE) :-
get_formatstring_arg(FNAME, RELARGNUM),
block(FID, BID, _),
instruction(BID, IID, _, _), 
is_X_call_instruction(FNAME, IID),
get_ith_operand(IID, RELARGNUM, FSLOC),
is_vreg(FSLOC),
block(FID, BID2, _),
instruction(BID2, IID2, FSLOC, _),
get_first_operand(IID2, OBJECT),
is_vreg(OBJECT),
IID2 < 0, //is a an artificial vreg
LEVEL = "Warning",
MESSAGE = cat(FNAME, " detected and its formatstring argument is not static.")
.

//case param is get && get is global (not static)
//issue warning if the minimal number of regular arguments is not met and critical arg(containing the formatstring) seems to be generated dynamically
is_vulnerable_format_string_instruction(IID, LEVEL, MESSAGE) :-
get_formatstring_arg(FNAME, RELARGNUM),
block(FID, BID, _),
instruction(BID, IID, _, _), 
is_X_call_instruction(FNAME, IID),
get_ith_operand(IID, RELARGNUM, FSLOC),
is_vreg(FSLOC),
block(FID, BID2, _),
instruction(BID2, IID2, FSLOC, _),
get_first_operand(IID2, OBJECT),
is_global(OBJECT),
!global(OBJECT, "private_unnamed_addr", _, _, _),
IID2 < 0, //is a an artificial vreg
LEVEL = "Warning",
MESSAGE = cat(FNAME, " detected and its formatstring argument is not static.")
.

//issue warning if the minimal number of regular arguments is not met and critical arg(containing the formatstring) seems to be generated dynamically
//case param is global
is_vulnerable_format_string_instruction(IID, LEVEL, MESSAGE) :-
get_formatstring_arg(FNAME, RELARGNUM),
block(FID, BID, _),
instruction(BID, IID, _, _), 
is_X_call_instruction(FNAME, IID),
get_ith_operand(IID, RELARGNUM, FSLOC),
is_global(FSLOC),
!global(FSLOC, "private_unnamed_addr", _, _, _),
block(FID, BID2, _),
instruction(BID2, IID2, FSLOC, _),
IID2 > 0, //is a real not an artificial vreg
LEVEL = "Warning",
MESSAGE = cat(FNAME, " detected and its formatstring argument is not static.")
.



//returns a functionname with the relative argument number, which contains the formatstring
.decl get_formatstring_arg(functionname: symbol, relargnum: number)
get_formatstring_arg(FNAME, NUM) :- FNAME="printf", NUM=1.
get_formatstring_arg(FNAME, NUM) :- FNAME="fprintf", NUM=2.

get_formatstring_arg(FNAME, NUM) :- FNAME="sprintf", NUM=2.
get_formatstring_arg(FNAME, NUM) :- FNAME="snprintf", NUM=3.

get_formatstring_arg(FNAME, NUM) :- FNAME="vprintf", NUM=1.
get_formatstring_arg(FNAME, NUM) :- FNAME="vfprintf", NUM=2.
get_formatstring_arg(FNAME, NUM) :- FNAME="vsprintf", NUM=2.
get_formatstring_arg(FNAME, NUM) :- FNAME="vsnprintf", NUM=3.

get_formatstring_arg(FNAME, NUM) :- FNAME="syslog", NUM=2.
