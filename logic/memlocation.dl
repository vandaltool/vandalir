// memtype e.g. i8*
.decl memtype(memtype: symbol)

memtype(MEM) :-
  MEM = "unknown". // unkown type

memtype(MEM) :-
    type(MEM).


.decl memlocation(functionid: _functionid,
                  memlocation: symbol,
                  memtyp: symbol,
                  memcategory: _memcategory)
.output memlocation(delimiter=",")

// stack allocations

// stack allocations of one element.
memlocation(FID, LOC, TYPE, CAT) :-
    instruction(BID, IID, LOC, OPC),
    block(FID, BID, _),
    OPC = "alloca", CAT = "stack",
    get_first_operand(IID, TYPE),
    is_numeric(SIZE),
    to_number(SIZE) = 1,
    !is_struct(TYPE),
    get_second_operand(IID, SIZE).

// global allocations of one element
memlocation(FID, LOC, TYPE, CAT) :-
    global(LOC, _, TYPE, SIZE, _),
    SIZE = "1",
    FID = -1,
    CAT = "global".

// global functions
memlocation(FID, LOC, TYPE, CAT) :-
    function(FIDGLOB, FNAME, "define", RETTYPE),
    FID = -1,
    LOC = cat("@",FNAME),
    get_arg_typelist_by_fid(ARGLIST, FIDGLOB),
    TYPE = cat(cat(cat(RETTYPE, " ("), ARGLIST), ")*"),
    CAT = "global".

// vreg function call
memlocation(FID, LOC, TYPE, CAT) :-
    instruction(BID, IID, VREG, OPC),
    block(FID, BID, _),
    OPC = "call",
    get_function_for_call_instruction(FNAME, IID),
    function(_, FNAME, _, RETTYPE),
    LOC = VREG,
    CAT = "vreg",
    TYPE = RETTYPE.

// vreg no load
memlocation(FID, LOC, TYPE, CAT) :-
    instruction(BID, IID, VREG, OPC),
    block(FID, BID, _),
    OPC != "load",
    OPC != "alloca",
    OPC != "getelementptr",
    !is_heap_allocation_call(IID),
    VREG != "%-1",
    LOC = VREG,
    CAT = "vreg",
    TYPE = "unknown".

// vreg load
memlocation(FID, LOC, TYPE, CAT) :-
    instruction(BID, IID, VREG, OPC),
    block(FID, BID, _),
    OPC = "load",
    VREG != "%-1",
    LOC = VREG,
    CAT = "vreg",
    get_first_operand(IID, TYPE).

// vreg getelementptr
memlocation(FID, LOC, TYPE, CAT) :-
    instruction(BID, _, VREG, OPC),
    block(FID, BID, _),
    OPC = "getelementptr",
    LOC = VREG,
    CAT = "vreg",
    TYPE = "unknown".

// heap allocations
memlocation(FID, LOC, TYPE, CAT) :-
    instruction(BID, IID, LOC, _),
    block(FID, BID, _),
    is_heap_allocation_call(IID),
    CAT = "heap",
    TYPE = "i8*".

// function arguments
memlocation(FID, LOC, TYPE, CAT) :-
    argument(FID, _, LOC, TYPE),
    CAT = "stack".


// helper relations

// helper function that enumerates all getelementptr indices
.decl get_all_getelementptr_indices(index: number)
//.output get_all_getelementptr_indices

get_all_getelementptr_indices(INDEX) :-
    instruction(BID, IID, _, OPC),
    block(_, BID, _),
    OPC = "getelementptr",
    get_ith_operand(IID, I, VAL),
    I>1,
    is_numeric(VAL),
    INDEX = to_number(VAL).

get_all_getelementptr_indices(INDEX) :-
    instruction(BID, IID, _, OPC),
    block(FID, BID, _),
    OPC = "getelementptr",
    get_ith_operand(IID, I, VAL),
    I>1,
    !is_numeric(VAL),
    is_vreg(VAL),
    get_int_by_vreg(INDEX, FID, VAL).


.decl get_all_getelementptr_indices_str(index: symbol)
get_all_getelementptr_indices_str(SYM) :-
    is_numeric(SYM),
    RES = to_number(SYM),
    get_all_getelementptr_indices(RES).
