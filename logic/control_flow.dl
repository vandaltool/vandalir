//control flow edges of CFG
.decl edge(functionid: _functionid, startblock: _blockid, endblock: _blockid)
//.output edge(delimiter=",")
edge(FID, START, END) :-
block(FID, START, STARTLABEL),
block(FID, END, ENDLABEL),
predecessor(FID, ENDLABEL, STARTLABEL)
.

//edge without fake edges (e.g. removes fake (one-time) loop upward edges)
.decl edge_cleaned(functionid: _functionid, startblock: _blockid, endblock: _blockid)
edge_cleaned(FID, START, END) :-
edge(FID, START, END).//, !fake_loop(FID, START, END).

//all edges that go downward (no loop edges!)
.decl downwardEdge(functionid: _functionid, startblock: _blockid, endblock: _blockid)
downwardEdge(FID, START, END) :- edge(FID, START, END), START<END.

//path that does not go through any loops
.decl downwardPath(functionid: _functionid, startblock: _blockid, endblock: _blockid)
downwardPath(FID, START, END) :- downwardEdge(FID, START, END).
downwardPath(FID, START, END) :- downwardPath(FID, START, MIDDLE), downwardEdge(FID, MIDDLE, END).

//block lists all blocks in downward path
.decl blockInDownwardPath(functionid: _functionid, startblock: _blockid, endblock: _blockid, block: _blockid)
//.output blockInDownwardPath(delimiter=",")
blockInDownwardPath(FID, START, END, BLOCK) :-
downwardPath(FID, START, END), BLOCK = START.

blockInDownwardPath(FID, START, END, BLOCK) :-
downwardPath(FID, START, END), BLOCK = END.

blockInDownwardPath(FID, START, END, BLOCK) :-
downwardPath(FID, START, X), downwardPath(FID, X, END), BLOCK = X.

//basic blocks



//get previous basic block within function
.decl previous_block(functionid: _functionid, start: _blockid, previous: _blockid)
previous_block(FID, START, PRED) :-
edge_cleaned(FID, PRED, START).

//get next basic block within function
.decl next_block(functionid: _functionid, start: _blockid, next: _blockid)
next_block(FID, START, NEXT) :- previous_block(FID, NEXT, START).



//get first block of function
.decl first_block(functionid: _functionid, blockid: _blockid)
first_block(FID, BID) :- !previous_block(FID, BID, _),
block(FID, BID2, _), block(FID, BID, _), !BID2<BID.

//get all possible blocks before current basic block within function
.decl is_before_within_function(functionid: _functionid, start: _blockid, before: _blockid)
//direct before
is_before_within_function(FID, START, BEFORE) :- previous_block(FID, START, BEFORE).
//non direct before
is_before_within_function(FID, START, BEFORE) :- block(FID, START, _), block(FID, PRED, _),
previous_block(FID, START, PRED),
is_before_within_function(FID, PRED, BEFORE).

//get all possible blocks behind current basic block within function
.decl is_behind_within_function(functionid: _functionid, start: _blockid, behind: _blockid)
//direct before
is_behind_within_function(FID, START, BEHIND) :- next_block(FID, START, BEHIND).
//non direct before
is_behind_within_function(FID, START, BEHIND) :- block(FID, START, _), block(FID, NEXT, _),
next_block(FID, START, NEXT),
is_behind_within_function(FID, NEXT, BEHIND).

//get all possible blocks from where the current basic block (which is a function start) is called
.decl get_caller_block(functionid: _functionid, blockid: _blockid, caller_functionid: _functionid, caller_blockid: _blockid)
get_caller_block(FID, BID, CFID, CBID) :- block(FID, BID, _), first_block(FID, BID),
block(CFID, CBID, _), instruction(CBID, CIID, _, _), is_call_instruction(CIID),
operand(CIID, _, OV), OV = FNAME,
function(FID, FNAME, _, _).

//get the first basic block of the function, which is called in the current basic block
.decl get_callee_block(functionid: _functionid, blockid: _blockid, callee_functionid: _functionid, callee_blockid: _blockid)
get_callee_block(FID, BID, CFID, CBID) :- block(FID, BID, _), block(CFID, CBID, _),
instruction(BID, IID, _, _), is_call_instruction(IID), operand(IID, _, OV), OV = FNAME,
function(CFID, FNAME, _, _),
first_block(CFID, CBID).

//get previous basic block even if it is a function call
.decl get_previous_or_caller_block(functionid: _functionid, start_blockid: _blockid, previous_functionid: _functionid, previous_blockid: _blockid)
//case previous block within function
get_previous_or_caller_block(FID, BID, PFID, PBID) :- block(FID, BID, _), block(PFID, PBID, _), previous_block(FID, BID, PBID), FID = PFID.
//case previous block might be caller
get_previous_or_caller_block(FID, BID, PFID, PBID) :- block(FID, BID, _), block(PFID, PBID, _), get_caller_block(FID, BID, PFID, PBID).

//get next basic block, even if it is in another function
.decl get_next_or_called_block(functionid: _functionid, start_blockid: _blockid, next_functionid: _functionid, next_blockid: _blockid)
//case next block within function
get_next_or_called_block(FID, BID, NFID, NBID) :- block(FID, BID, _), block(NFID, NBID, _), next_block(FID, BID, NBID), FID = NFID.
//case next block following function call
get_next_or_called_block(FID, BID, NFID, NBID) :- block(FID, BID, _), block(NFID, NBID, _), get_callee_block(FID, BID, NFID, NBID).

//get all possible previous blocks, transisting function calls
.decl is_before(functionid: _functionid, blockid: _blockid, before_functionid: _functionid, before_blockid: _blockid)
//direct before
is_before(FID, BID, BFID, BBID) :- get_previous_or_caller_block(FID, BID, BFID, BBID).
//non direct before
is_before(FID, BID, BFID, BBID) :- block(FID, BID, _), block(PFID, PBID, _),
get_previous_or_caller_block(FID, BID, PFID, PBID),
is_before(PFID, PBID, BFID, BBID).

//get all possible following blocks, transisting function calls
.decl is_behind(functionid: _functionid, blockid: _blockid, behind_functionid: _functionid, behind_blockid: _blockid)
//direct before
is_behind(FID, BID, BFID, BBID) :- get_next_or_called_block(FID, BID, BFID, BBID).
//non direct before
is_behind(FID, BID, BFID, BBID) :- block(FID, BID, _), block(PFID, PBID, _),
get_next_or_called_block(FID, BID, PFID, PBID),
is_behind(PFID, PBID, BFID, BBID).


.decl is_instruction_before_other_within_block(instructionid: _instructionid, instructionid_before: _instructionid)
is_instruction_before_other_within_block(IID, IID_BEFORE) :- instruction(BID, IID, _, _), instruction(BID, IID_BEFORE, _, _),
IID_BEFORE < IID.


.decl is_instruction_behind_other_within_block(instructionid: _instructionid, instructionid_behind: _instructionid)
is_instruction_behind_other_within_block(IID, IID_BEHIND) :- instruction(BID, IID, _, _), instruction(BID, IID_BEHIND, _, _),
IID_BEHIND > IID.


.decl is_instruction_before_other(instructionid: _instructionid, instructionid_before: _instructionid)
//case instructions in same basic block
is_instruction_before_other(IID, IID_BEFORE) :-
instruction(BID, IID, _, _), instruction(BID_BEFORE, IID_BEFORE, _, _),
BID = BID_BEFORE, is_instruction_before_other_within_block(IID, IID_BEFORE).
//case instructions in different basic blocks
is_instruction_before_other(IID, IID_BEFORE) :-
instruction(BID, IID, _, _), instruction(BID_BEFORE, IID_BEFORE, _, _),
BID != BID_BEFORE,
block(FID, BID, _), block(FID_BEFORE, BID_BEFORE, _),
is_behind(FID, BID, FID_BEFORE, BID_BEFORE).

.decl is_instruction_behind_other(instructionid: _instructionid, instructionid_behind: _instructionid)
//case instructions in same basic block
is_instruction_behind_other(IID, IID_BEHIND) :- instruction(BID, IID, _, _), instruction(BID_BEHIND, IID_BEHIND, _, _),
BID = BID_BEHIND, is_instruction_behind_other_within_block(IID, IID_BEHIND).
//case instructions in different basic blocks
is_instruction_behind_other(IID, IID_BEHIND) :- instruction(BID, IID, _, _), instruction(BID_BEHIND, IID_BEHIND, _, _),
BID != BID_BEHIND,
block(FID, BID, _), block(FID_BEHIND, BID_BEHIND, _),
is_behind(FID, BID, FID_BEHIND, BID_BEHIND).


//conditions if icmp

//upper bounds
.decl upperbound_conditions(condition: symbol)
upperbound_conditions(SYM) :- SYM = "slt".
upperbound_conditions(SYM) :- SYM = "sle".
upperbound_conditions(SYM) :- SYM = "ult".
upperbound_conditions(SYM) :- SYM = "ule".

//larger
.decl smaller_condition(condition: symbol)
smaller_condition(SYM) :- SYM = "slt".
smaller_condition(SYM) :- SYM = "ult".

//larger equal
.decl smaller_equal_condition(condition: symbol)
smaller_equal_condition(SYM) :- SYM = "sle".
smaller_equal_condition(SYM) :- SYM = "ule".

//lower bounds
.decl lowerbound_conditions(condition: symbol)
lowerbound_conditions(SYM) :- SYM = "sgt".
lowerbound_conditions(SYM) :- SYM = "sge".
lowerbound_conditions(SYM) :- SYM = "ugt".
lowerbound_conditions(SYM) :- SYM = "uge".