// get size of heap allocation
.decl get_size_of_heap_alloc(instructionid: _instructionid, size: number)

get_size_of_heap_alloc(IID, SIZE) :-
    is_heap_allocation_call(IID),
    is_malloc_call_instruction(IID),
    get_size_of_malloc(IID, SIZE).

get_size_of_heap_alloc(IID, SIZE) :-
    is_heap_allocation_call(IID),
    is_calloc_call_instruction(IID),
    get_size_of_calloc(IID, SIZE).

get_size_of_heap_alloc(IID, SIZE) :-
    is_heap_allocation_call(IID),
    is_realloc_call_instruction(IID),
    get_size_of_realloc(IID, SIZE).


// get size of malloc
// TODO: rewrite as hardcoded and vreg can no be implemented in one rule
.decl get_size_of_malloc(instructionid: _instructionid, size: number)

// case hard coded size
get_size_of_malloc(IID, SIZE) :-
    is_malloc_call_instruction(IID),
    get_first_operand(IID, OV1),
    is_numeric(OV1),
    SIZE = to_number(OV1).

// case get size by vreg
get_size_of_malloc(IID, SIZE) :-
    is_malloc_call_instruction(IID),
    get_first_operand(IID, OV1),
    block(FID, BID, _),
    instruction(BID, IID, _, _),
    is_vreg(OV1),
    get_int_by_vreg(SIZE, FID, OV1).


// get size of calloc
// TODO: rewrite as hardcoded and vreg can no be implemented in one rule
// case both hardcoded
.decl get_size_of_calloc(instructionid: _instructionid, size: number)

get_size_of_calloc(IID, SIZE) :-
    is_calloc_call_instruction(IID),
    get_first_operand(IID, OV1),
    get_second_operand(IID, OV2),
    is_numeric(OV1),
    is_numeric(OV2),
    SIZE = to_number(OV1)*to_number(OV2).

// case vreg, hardcoded
get_size_of_calloc(IID, SIZE) :-
    is_calloc_call_instruction(IID),
    get_first_operand(IID, OV1),
    get_second_operand(IID, OV2),
    block(FID, BID, _),
    instruction(BID, IID, _, _),
    get_int_by_vreg(SIZE1, FID, OV1),
    is_vreg(OV1),
    is_numeric(OV2),
    SIZE2 = to_number(OV2),
    SIZE = SIZE1*SIZE2.

// case hardcoded, vreg
get_size_of_calloc(IID, SIZE) :-
    is_calloc_call_instruction(IID),
    get_first_operand(IID, OV1),
    get_second_operand(IID, OV2),
    block(FID, BID, _),
    instruction(BID, IID, _, _),
    get_int_by_vreg(SIZE2, FID, OV2),
    is_numeric(OV1),
    is_vreg(OV2),
    SIZE1 = to_number(OV1),
    SIZE = SIZE1*SIZE2.

// case both hardcoded
get_size_of_calloc(IID, SIZE) :-
    is_calloc_call_instruction(IID),
    get_first_operand(IID, OV1),
    get_second_operand(IID, OV2),
    block(FID, BID, _),
    instruction(BID, IID, _, _),
    get_int_by_vreg(SIZE1, FID, OV1),
    get_int_by_vreg(SIZE2, FID, OV2),
    is_vreg(OV1),
    is_vreg(OV2),
    SIZE = SIZE1*SIZE2.


// get size of realloc
// TODO: rewrite as hardcoded and vreg can now be implemented in one rule
// case hard coded size
.decl get_size_of_realloc(instructionid: _instructionid, size: number)

get_size_of_realloc(IID, SIZE) :-
    is_realloc_call_instruction(IID),
    get_second_operand(IID, OV2),
    is_numeric(OV2),
    SIZE = to_number(OV2).

// case get size by vreg
get_size_of_realloc(IID, SIZE) :-
    is_realloc_call_instruction(IID),
    get_second_operand(IID, OV2),
    is_vreg(OV2),
    block(FID, BID, _),
    instruction(BID, IID, _, _),
    get_int_by_vreg(SIZE, FID, OV2).


// get size of buffer by virtual register
.decl get_buffsize_by_vreg(size: number,
                           functionid: _functionid,
                           _vreg: symbol)
.output get_buffsize_by_vreg(delimiter=",")

// case alloca (end recursion)
get_buffsize_by_vreg(VAL, FID, VREG) :-
    block(FID, BID, _),
    instruction(BID, IID, VREG, OPC),
    OPC = "alloca",
    array(IID, _, _, _, VREG),
    get_size_of_alloca(IID, VAL),
    get_first_operand(IID, ALLOCATYPE),
    !is_pointer(ALLOCATYPE),
    !is_struct(ALLOCATYPE).

// case getelementptr simple
get_buffsize_by_vreg(VAL, FID, VREG) :-
    block(FID, BID, _),
    instruction(BID, IID, VREG, OPC),
    OPC = "getelementptr",
    get_first_operand(IID, OV1),
    get_second_operand(IID, INDEX),
    get_int_by_vreg(INDEXNUM, FID, INDEX),
    INDEXNUM = 0,
    get_last_operand(IID, TYPE),
    !contains("~", TYPE),
    !is_struct(OV1),
    !is_struct(TYPE),
    get_buffsize_by_vreg(VAL, FID, OV1).

// case getelementptr array
/*
get_buffsize_by_vreg(VAL, FID, VREG) :-
    block(FID, BID, _),
    instruction(BID, IID, VREG, OPC),
    OPC = "getelementptr",
    get_second_operand(IID, INDEX),
    get_int_by_vreg(INDEXNUM, FID, INDEX),
    INDEXNUM = 0,
    get_last_operand(IID, TYPE),
    contains("~", TYPE),
    TYPESTR1 = cat(" ", TYPE),
    TYPESTR2 = cat(TYPE, " "),
    SIZESTR = @get_behind(TYPESTR1, "~"),
    SIZE = to_number(SIZESTR),
    ACTUALTYPE = @get_before(TYPESTR2, "~"),
    !is_pointer(ACTUALTYPE),
    !is_struct(ACTUALTYPE),
    datatype_factor(ACTUALTYPE, FACTOR),
    VAL = SIZE*FACTOR.
*/

// case getelementptr struct
get_buffsize_by_vreg(VAL, FID, VREG) :-
    block(FID, BID, _),
    instruction(BID, IID, VREG, OPC),
    OPC = "getelementptr",
    get_last_operand(IID, TYPE),
    !is_pointer(TYPE),
    is_struct(TYPE),
    struct(STRUCTID, TYPE, _),
    VAL = sum VALELEM : get_struct_operand_size(VALELEM, STRUCTID, _).

// case getelementptr array of structs
get_buffsize_by_vreg(VAL, FID, VREG) :-
    block(FID, BID, _),
    instruction(BID, IID, VREG, OPC),
    OPC = "getelementptr",
    get_last_operand(IID, TYPE),
    !is_pointer(TYPE),
    contains("~", TYPE),
    // SIZESTR = @get_behind(TYPE, "~"),
    SIZESTR = substr(TYPE, @get_before(TYPE, "~")+1, strlen(TYPE)),
    SIZE = to_number(SIZESTR),
    ACTUALTYPE = substr(TYPE, 0, @get_before(TYPE, "~")),
    is_struct(ACTUALTYPE),
    struct(STRUCTID, ACTUALTYPE, _),
    VALSTRUCT = sum VALELEM : get_struct_operand_size(VALELEM, STRUCTID, _),
    VAL = SIZE*VALSTRUCT.

// case memequals
get_buffsize_by_vreg(VAL, FID, VREG) :-
    block(FID, _, _),
    memequals(FID, START_LOC, END_FID, END_LOC),
    START_LOC = VREG,
    get_buffsize_by_vreg(VAL, END_FID, END_LOC).

// case heap allocation
get_buffsize_by_vreg(VAL, FID, VREG) :-
    block(FID, BID, _),
    instruction(BID, IID, VREG, _),
    is_heap_allocation_call(IID),
    get_size_of_heap_alloc(IID, SIZE),
    VAL = SIZE.

// case unlimited user input (maximum length)
get_buffsize_by_vreg(VAL, FID, VREG) :-
    CAT = cat("userinput_",to_string(MAXINT)),
    taintlocation(FID, VREG, _, CAT),
    // is_memloc_with_direct_userinput(FID, VREG, CAT),
    // is_pointer(TYPE),
    VAL = MAXINT.

// case direct user input (minimum length => limited or unlimited may have a
// length of 0)
get_buffsize_by_vreg(VAL, FID, VREG) :-
    memlocation(FID, VREG, _, _),
    is_memloc_with_userinput(FID, VREG),
    // is_pointer(TYPE),
    VAL = 0.

// case global
get_buffsize_by_vreg(VAL, FID, VREG) :-
    is_global(VREG),
    global(VREG, _, _, SIZE, _),
    // TODO(dmitryya) |is_number| does also the `opval` check which fails
    // for just number. Need to come up with beter solution there.
    // is_numeric(SIZE),
    VAL = to_number(SIZE),
    function(FID, _, _, _).


.decl get_struct_size(value: number, structid: _structid)
//.output get_struct_size(delimiter=",")
get_struct_size(VAL, STRUCTID) :-
    struct(STRUCTID, _, _),
    VAL = sum SIZE : get_struct_operand_size(SIZE, STRUCTID, _).


.decl get_struct_operand_size(value: number,
                              structid: _structid,
                              structoperandid:_structoperandid)
//.output get_struct_operand_size(delimiter=",")

get_struct_operand_size(VAL, STRUCTID, STROPID) :-
    structoperand(STRUCTID, STROPID, STRDTYPE, VALSTR),
    datatype_factor(STRDTYPE, FACTOR),
    VAL = to_number(VALSTR)*FACTOR.


// get str global values
.decl get_global_str_value(value: symbol, global: symbol)
//.output get_global_str_value

get_global_str_value(VAL, GLOB) :-
    is_global_str(GLOB),
    global(GLOB, _, _, _, VAL).


// helper function for atoi => spawn: "9" ... "99999999" + negative
.decl x_nines(out: symbol, times: number)

x_nines(OUT, X) :-
    X=1, OUT = "9".

x_nines(OUT, X) :-
    X=2, OUT = "99".

x_nines(OUT, X) :-
    X=3, OUT = "999".

x_nines(OUT, X) :-
    X=4, OUT = "9999".

x_nines(OUT, X) :-
    X=5, OUT = "99999".

x_nines(OUT, X) :-
    X=6, OUT = "999999".

x_nines(OUT, X) :-
    X=7, OUT = "9999999".

x_nines(OUT, X) :-
    X>=8, anumber(X),
    OUT = "99999999".


.decl datatype_factor(datatype: symbol, factor: number)
datatype_factor(DTYPE, FACTOR) :-
    datatype_factor_helper(DTYPE, FACTOR).

// datatype_factor(DTYPE, FACTOR) :-
//    opval(DTYPE),
//    !datatype_factor_helper(DTYPE, FACTOR),
//    FACTOR = 1.


.decl datatype_factor_helper(datatype: symbol, factor: number)
//.output datatype_factor_helper(delimiter=",")

datatype_factor_helper(DTYPE, FACTOR) :-
    DTYPE = "i8", FACTOR = 1.

datatype_factor_helper(DTYPE, FACTOR) :-
    DTYPE = "i16", FACTOR = 2.

datatype_factor_helper(DTYPE, FACTOR) :-
    DTYPE = "i32", FACTOR = 4.

datatype_factor_helper(DTYPE, FACTOR) :-
    DTYPE = "i64", FACTOR = 8.

datatype_factor_helper(DTYPE, FACTOR) :-
    is_pointer(DTYPE),
    FACTOR = 1.

/*
// case struct
datatype_factor_helper(DTYPE, FACTOR) :-
    is_struct(DTYPE),
    !is_pointer(DTYPE),
    struct(STRUCTID, DTYPE, _),
    FACTOR = sum VALELEM : get_struct_operand_size(VALELEM, STRUCTID, _).
*/

/*
// case array
datatype_factor_helper(DTYPE, FACTOR) :-
    opval(DTYPE),
    contains("~", DTYPE),
    SIZESTR = @get_behind(DTYPE, "~"),
    SIZE = to_number(SIZESTR),
    ACTUALTYPE = @get_before(DTYPE, "~"),
    datatype_factor_helper(ACTUALTYPE, TYPEFACTOR),
    FACTOR = SIZE*TYPEFACTOR.
*/
