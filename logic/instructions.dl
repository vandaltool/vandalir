//operands access

.decl get_first_operand(instructionid: _instructionid, operandvalue: symbol)
//.output get_first_operand(delimeter=",")
get_first_operand(IID, VAL) :-
    operand(IID, OID1, OV1),
    !operand(IID, OID1-1, _),
    VAL = OV1.


.decl get_second_operand(instructionid: _instructionid, operandvalue: symbol)
//.output get_second_operand(delimeter=",")
get_second_operand(IID, VAL) :-
    operand(IID, OID1, _),
    operand(IID, OID2, OV2),
    !operand(IID, OID1-1, _),
    OID2=OID1+1,
    VAL = OV2.


.decl get_third_operand(instructionid: _instructionid, operandvalue: symbol)
//.output get_third_operand(delimeter=",")
get_third_operand(IID, VAL) :-
    operand(IID, OID1, _),
    operand(IID, OID2, _),
    operand(IID, OID3, OV3),
    !operand(IID, OID1-1, _),
    OID2=OID1+1,
    OID3=OID2+1,
    VAL = OV3.


.decl get_fourth_operand(instructionid: _instructionid, operandvalue: symbol)
//.output get_fourth_operand(delimeter=",")
get_fourth_operand(IID, VAL) :-
    operand(IID, OID1, _),
    operand(IID, OID2, _),
    operand(IID, OID3, _),
    operand(IID, OID4, OV4),
    !operand(IID, OID1-1, _),
    OID2=OID1+1,
    OID3=OID2+1,
    OID4=OID3+1,
    VAL = OV4.


.decl get_fifth_operand(instructionid: _instructionid, operandvalue: symbol)
//.output get_fifth_operand(delimeter=",")
get_fifth_operand(IID, VAL) :-
    operand(IID, OID1, _),
    operand(IID, OID2, _),
    operand(IID, OID3, _),
    operand(IID, OID4, _),
    operand(IID, OID5, OV5),
    !operand(IID, OID1-1, _),
    OID2=OID1+1,
    OID3=OID2+1,
    OID4=OID3+1,
    OID5=OID4+1,
    VAL = OV5.


//get ith operand
.decl get_ith_operand(instructionid: _instructionid,
                      i: number,
                      operandvalue: symbol)
get_ith_operand(IID, I, VAL) :-
    I=1,
    get_first_operand(IID, VAL).

get_ith_operand(IID, I, VAL) :-
    I=2,
    get_second_operand(IID, VAL).

get_ith_operand(IID, I, VAL) :-
    I=3,
    get_third_operand(IID, VAL).

get_ith_operand(IID, I, VAL) :-
    I=4,
    get_fourth_operand(IID, VAL).

get_ith_operand(IID, I, VAL) :-
    I=5,
    get_fifth_operand(IID, VAL).

get_ith_operand(IID, I, VAL) :-
    I>5,
    get_ith_operand_recursive(IID, _, I, VAL).


//recursive helper
.decl get_ith_operand_recursive(instructionid: _instructionid,
                                operandid: _operandid,
                                i: number,
                                operandvalue: symbol)

get_ith_operand_recursive(IID, OID, I, VAL) :-
    I=1, operand(IID, OID, VAL),
    !operand(IID, OID-1, _).

get_ith_operand_recursive(IID, OID, I, VAL) :-
    I>1, I=I2+1, operand(IID, OID, VAL),
    get_ith_operand_recursive(IID, OID-1, I2, _).


//get last operand
.decl get_last_operand(instructionid: _instructionid, operandvalue: symbol)
get_last_operand(IID, OV) :-
    operand(IID, OID, OV),
    !operand(IID, OID+1, _).


//number of operands
.decl get_num_operands(instructionid: _instructionid, operandscount: number)
//.output get_num_operands(delimeter=",")
get_num_operands(IID, COUNT) :-
    operand(IID, OID, _),
    !operand(IID, OID2, _),
    OID2 = OID-1,
    get_num_operands_recursive(IID, OID, COUNT).


//recursive
.decl get_num_operands_recursive(instructionid: _instructionid,
                                 operandid: _operandid,
                                 operandscount: number)

get_num_operands_recursive(IID, OID, COUNT) :-
    operand(IID, OID, _),
    !operand(IID, OID2, _),
    OID2 = OID+1, COUNT=1.

get_num_operands_recursive(IID, OID, COUNT) :-
    operand(IID, OID, _),
    operand(IID, OID2, _),
    OID2 = OID+1, get_num_operands_recursive(IID, OID2, OLDCOUNT),
    COUNT = OLDCOUNT+1.


//instructions

//get last instruction of block
.decl last_instruction_in_block(blockid: _blockid, instructionid: _instructionid)
//.output last_instruction_in_block
last_instruction_in_block(BID, IID) :-
    instruction(BID, IID, _, _),
    IID = max IIDNUM : instruction(BID, IIDNUM, _, _).


//get only conversion instruction
.decl is_conversion_instruction(instructionid: _instructionid)
is_conversion_instruction(IID) :-
    instruction(_, IID, _, OPC),
    conversion_instruction(OPC).


.decl conversion_instruction(opcode: symbol)
conversion_instruction(OPC) :-
    OPC = "trunc".
conversion_instruction(OPC) :-
    OPC = "zext".
conversion_instruction(OPC) :-
    OPC = "sext".
conversion_instruction(OPC) :-
    OPC = "fptrunc".
conversion_instruction(OPC) :-
    OPC = "fpext".
conversion_instruction(OPC) :-
    OPC = "fptoui".
conversion_instruction(OPC) :-
    OPC = "fptosi".
conversion_instruction(OPC) :-
    OPC = "uitofp".
conversion_instruction(OPC) :-
    OPC = "sitofp".
conversion_instruction(OPC) :-
    OPC = "ptrtoint".
conversion_instruction(OPC) :-
    OPC = "inttoptr".
conversion_instruction(OPC) :-
    OPC = "bitcast".
conversion_instruction(OPC) :-
    OPC = "addrspacecast".


//get only call instruction
.decl is_call_instruction(instructionid: _instructionid)
is_call_instruction(IID) :-
    instruction(_, IID, _, OPC),
    OPC = "call".


//get only call strncpy instructions
.decl is_strncpy_call_instruction(instructionid: _instructionid)
is_strncpy_call_instruction(IID) :-
    is_call_instruction(IID),
    get_last_operand(IID, OV),
    OV = "strncpy".


//get only call strlen instructions
.decl is_strlen_call_instruction(instructionid: _instructionid)
is_strlen_call_instruction(IID) :-
    is_call_instruction(IID),
    get_last_operand(IID, OV),
    OV = "strlen".


//get only call sizeof instructions
.decl is_sizeof_call_instruction(instructionid: _instructionid)
is_sizeof_call_instruction(IID) :-
    is_call_instruction(IID),
    get_last_operand(IID, OV),
    OV = "sizeof".


//get only call fgets instructions
.decl is_fgets_call_instruction(instructionid: _instructionid)
is_fgets_call_instruction(IID) :-
    is_call_instruction(IID),
    get_last_operand(IID, OV),
    OV = "fgets".


//get only call malloc instructions
.decl is_malloc_call_instruction(instructionid: _instructionid)
is_malloc_call_instruction(IID) :-
    is_call_instruction(IID),
    get_last_operand(IID, OV),
    OV = "malloc".


//get only call calloc instructions
.decl is_calloc_call_instruction(instructionid: _instructionid)
is_calloc_call_instruction(IID) :-
    is_call_instruction(IID),
    get_last_operand(IID, OV),
    OV = "calloc".


//get only call realloc instructions
.decl is_realloc_call_instruction(instructionid: _instructionid)
is_realloc_call_instruction(IID) :-
    is_call_instruction(IID),
    get_last_operand(IID, OV),
    OV = "realloc".


//get only call gets instructions
.decl is_gets_call_instruction(instructionid: _instructionid)
is_gets_call_instruction(IID) :-
    is_call_instruction(IID),
    get_last_operand(IID, OV),
    OV = "gets".


//get only call memcpy instructions
.decl is_memcpy_call_instruction(instructionid: _instructionid)
is_memcpy_call_instruction(IID) :-
    is_call_instruction(IID),
    get_last_operand(IID, OV),
    contains("memcpy", OV).


//get only call memmove instructions
.decl is_memmove_call_instruction(instructionid: _instructionid)
is_memmove_call_instruction(IID) :-
    is_call_instruction(IID),
    get_last_operand(IID, OV),
    contains("memmove", OV).


//get only call gets instructions
.decl is_strcpy_call_instruction(instructionid: _instructionid)
is_strcpy_call_instruction(IID) :-
    is_call_instruction(IID),
    get_last_operand(IID, OV),
    OV = "strcpy".


//get only call wscpy instructions
.decl is_wscpy_call_instruction(instructionid: _instructionid)
is_wscpy_call_instruction(IID) :-
    is_call_instruction(IID),
    get_last_operand(IID, OV),
    OV = "wscpy".


//get only call atoi family instructions
.decl is_atoi_family_call_instruction(instructionid: _instructionid)
is_atoi_family_call_instruction(IID) :-
    is_call_instruction(IID),
    get_last_operand(IID, OV),
    OV = "atoi".
is_atoi_family_call_instruction(IID) :-
    is_call_instruction(IID),
    get_last_operand(IID, OV),
    OV = "atol".
is_atoi_family_call_instruction(IID) :-
    is_call_instruction(IID),
    get_last_operand(IID, OV),
    OV = "atoll".
is_atoi_family_call_instruction(IID) :-
    is_call_instruction(IID),
    get_last_operand(IID, OV),
    OV = "atof".


//alias of get_function_for_call_instruction
.decl is_X_call_instruction(functionname: symbol, instructionid: _instructionid)
is_X_call_instruction(FNAME, IID) :-
    get_function_for_call_instruction(FNAME, IID).


//if call instruction give called function name
.decl get_function_for_call_instruction(functionname: symbol,
                                        instructionid: _instructionid)
//.output get_function_for_call_instruction(delimiter=",")

//regular call instruction (no function pointer)
get_function_for_call_instruction(NAME, IID) :-
    is_call_instruction(IID),
    get_last_operand(IID, NAME),
    !is_vreg(NAME).

//call to function pointer
get_function_for_call_instruction(NAME, IID) :-
    is_call_instruction(IID),
    get_last_operand(IID, VREG),
    is_vreg(VREG),
    instruction(BID, IID, _, _),
    block(FID, BID, _),
    memequals(FID, VREG, -1, GLOBNAME),
    NAME = substr(GLOBNAME, 1, strlen(GLOBNAME)).


//load instructions

//get only load instruction
.decl is_load_instruction(instructionid: _instructionid)
is_load_instruction(IID) :-
    instruction(_, IID, _, OPC),
    OPC = "load".


//returns location from which the value is loaded
.decl get_load_pointer_by_iid(functionid: _functionid,
                              location: symbol,
                              instructionid: _instructionid)
.output get_load_pointer_by_iid

//case vreg
get_load_pointer_by_iid(FID, VAL, IID) :-
    instruction(BID, IID, _, "load"),
    get_third_operand(IID, VAL),
    is_vreg(VAL),
    !is_global(VAL),
    block(FID, BID, _).

//case global
get_load_pointer_by_iid(FID, VAL, IID) :-
    is_load_instruction(IID),
    get_third_operand(IID, VAL),
    !is_vreg(VAL),
    is_global(VAL),
    FID = -1.


//store instructions

//get only store instruction
.decl is_store_instruction(instructionid: _instructionid)
is_store_instruction(IID) :-
    instruction(_, IID, _, OPC),
    OPC = "store".


//returns location at which the value is stored
.decl get_store_pointer_by_iid(functionid: _functionid,
                               location: symbol,
                               instructionid: _instructionid)
//.output get_store_pointer_by_iid(delimeter=",")

//case vreg
get_store_pointer_by_iid(FID, VAL, IID) :-
    instruction(BID, IID, _, "store"),
    get_fourth_operand(IID, VAL),
    is_vreg(VAL),
    !is_global(VAL),
    block(FID, BID, _).

//case global
get_store_pointer_by_iid(FID, VAL, IID) :-
    is_store_instruction(IID),
    get_fourth_operand(IID, VAL),
    !is_vreg(VAL),
    is_global(VAL),
    FID = -1.


.decl get_store_value_by_iid(functionid: _functionid,
                             value: symbol,
                             instructionid: _instructionid)
//.output get_store_value_by_iid(delimeter=",")

//case vreg is stored
get_store_value_by_iid(FID, VAL, IID) :-
    instruction(BID, IID, _, "store"),
    get_second_operand(IID, VAL),
    is_vreg(VAL),
    block(FID, BID, _).

//case global is stored
get_store_value_by_iid(FID, VAL, IID) :-
    is_store_instruction(IID),
    get_second_operand(IID, VAL),
    !is_vreg(VAL),
    is_global(VAL),
    FID = -1.

//case constant is stored
get_store_value_by_iid(FID, VAL, IID) :-
    is_store_instruction(IID),
    get_second_operand(IID, VAL),
    !is_vreg(VAL),
    is_numeric(VAL),
    FID = -1.


.decl get_fid_for_call_instruction(functionid: _functionid,
                                   instructionid: _instructionid)
//.output get_fid_for_call_instruction(delimiter=",")
get_fid_for_call_instruction(FID, IID) :-
    get_function_for_call_instruction(FNAME, IID),
    function(FID, FNAME, _, _).


.decl get_fid_by_fname(functionid: _functionid, fname: symbol)
get_fid_by_fname(FID, FNAME) :-
    function(FID, FNAME, _, _).


//get size of alloca
.decl get_size_of_alloca(instructionid: _instructionid, size: number)
get_size_of_alloca(IID, SIZE) :-
    instruction(_, IID, _, OPC),
    OPC = "alloca",
    get_second_operand(IID, OV1),
    is_numeric(OV1),
    SIZE = to_number(OV1).


.decl is_alloca_multidimensional(instructionid: _instructionid)
is_alloca_multidimensional(IID) :-
    instruction(_, IID, _, OPC),
    OPC = "alloca",
    get_num_operands(IID, OPCOUNT),
    OPCOUNT>2.


.decl get_alloca_arraylevel(instructionid: _instructionid, arraylevel: number)
//.output get_alloca_arraylevel(delimiter=";")
get_alloca_arraylevel(IID, SIZE) :-
    instruction(_, IID, _, OPC),
    OPC = "alloca",
    get_num_operands(IID, OPCOUNT),
    SIZE = OPCOUNT-1.


//heap

//get only heap allocation calls
.decl is_heap_allocation_call(instructionid: _instructionid)
is_heap_allocation_call(IID) :-
    is_call_instruction(IID),
    get_last_operand(IID, FNAME),
    heap_allocation_instruction(FNAME).


.decl heap_allocation_instruction(instruction: symbol)
heap_allocation_instruction(INS) :-
    INS = "malloc".
heap_allocation_instruction(INS) :-
    INS = "calloc".
heap_allocation_instruction(INS) :-
    INS = "realloc".


//argument relations

//calculate relative argument id from fid and absolute argument id
.decl get_relative_argid(functionid: _functionid,
                         argid: _argumentid,
                         argid_relative: number)
//.output get_relative_argid

get_relative_argid(FID, ARGID, ARGID_REL) :-
    argument(FID, ARGID, _, _),
    ARGID2=ARGID-1,
    !argument(FID, ARGID2, _, _),
    ARGID_REL = 1.

get_relative_argid(FID, ARGID, ARGID_REL) :-
    argument(FID, ARGID, _, _),
    argument(FID, ARGID2, _, _),
    ARGID2+1=ARGID,
    get_relative_argid(FID, ARGID2, ARGID2_REL),
    ARGID_REL = ARGID2_REL+1.


//get number of arguments by fid
.decl get_num_of_arguments_by_fid(argnum: number, functionid: _functionid)
get_num_of_arguments_by_fid(NUM, FID) :-
    NUM = count : {argument(FID, _, _, _)},
    function(FID, _, _, _).


//get number of arguments by function name
.decl get_num_of_arguments_by_fname(argnum: number, functionname: symbol)
get_num_of_arguments_by_fname(NUM, FNAME) :-
    NUM = count : {argument(FID, _, _, _)},
    function(FID, FNAME, _, _).


//get list of argumenttypes
.decl get_arg_typelist_by_fid(argtypelist: symbol, functionid: _functionid)
//.output get_arg_typelist_by_fid
get_arg_typelist_by_fid(ARGLIST, FID) :-
    function(FID, _, _, _),
    get_arg_typelist_by_fid_rec(ARGLIST, FID, ARGID),
    get_relative_argid(FID, ARGID, ARGID_REL),
    get_num_of_arguments_by_fid(ARGNUM, FID),
    ARGNUM = ARGID_REL.


//recursive helper to get list of argumenttypes
.decl get_arg_typelist_by_fid_rec(argtypelist: symbol,
                                  functionid: _functionid,
                                  argid: _argumentid)

get_arg_typelist_by_fid_rec(ARGLIST, FID, ARGID) :-
    function(FID, _, _, _),
    argument(FID, ARGID, _, TYPE),
    get_relative_argid(FID, ARGID, ARGID_REL),
    ARGID_REL = 1,
    ARGLIST = TYPE.

get_arg_typelist_by_fid_rec(ARGLIST, FID, ARGID) :-
    function(FID, _, _, _),
    argument(FID, ARGID, _, TYPE),
    get_relative_argid(FID, ARGID, ARGID_REL),
    ARGID_REL > 1,
    ARGLIST = cat(OLDARGLIST,", ", TYPE),
    get_arg_typelist_by_fid_rec(OLDARGLIST, FID, ARGID-1).


//global relations

//get size of global
//currently supports only numeric sizes
.decl get_size_of_global(globalname: symbol, size: number)
//case numeric global
get_size_of_global(GLOBAL, SIZE) :-
    global(GLOBAL, _, _, SIZESTR, _),
    is_numeric(SIZESTR),
    SIZE = to_number(SIZESTR).
