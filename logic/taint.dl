//user input "tainting":

//taintlocation mimics memlocation


//function arguments containing userinput

//mode equal
.decl taintlocation(functionid: _functionid, memloc: symbol, memtyp: symbol, memcategory: _memcategory)
.output taintlocation(delimiter=",")

//mode one argument
taintlocation(FID, LOC, TYPE, CAT) :-
block(FID, BID, _),
instruction(BID, IID, _, "call"),
is_X_call_instruction(FNAME, IID),
get_ith_operand(IID, ARGID_REL, LOC),
argument(FIDFUNC, ARGID, _, TYPE),
get_relative_argid(FIDFUNC, ARGID, ARGID_REL),
function(FIDFUNC, FNAME, _, _),
userinput(FNAME, ARGID_REL, "=", _),
get_size_of_userinput(SIZE, _, FNAME, ARGID_REL),
CAT = cat("userinput_", to_string(SIZE))
.

//mode following
taintlocation(FID, LOC, TYPE, CAT) :-
block(FID, BID, _),
instruction(BID, IID, _, "call"),
is_X_call_instruction(FNAME, IID),
get_ith_operand(IID, ARGID_REL, LOC),

argument(FIDFUNC, ARGID, _, TYPE),
get_relative_argid(FIDFUNC, ARGID, ARGID_REL),
function(FIDFUNC, FNAME, _, _),
userinput(FNAME, INPUT_ID, "+", _),
get_size_of_userinput(SIZE, _, FNAME, ARGID_REL),
CAT = cat("userinput_", to_string(SIZE)),
ARGID_REL >= INPUT_ID
.

//mode main (following)
taintlocation(FID, LOC, TYPE, CAT) :-
FNAME = "main",
argument(FID, ARGID, LOC, TYPE),
get_relative_argid(FID, ARGID, ARGID_REL),
function(FID, FNAME, _, _),
userinput(FNAME, INPUT_ID, "+", _),
get_size_of_userinput(SIZE, _, FNAME, ARGID_REL),
CAT = cat("userinput_", to_string(SIZE)),
ARGID_REL >= INPUT_ID
.

//mode return value
taintlocation(FID, LOC, TYPE, CAT) :-
function(_, FNAME, _, TYPE),
instruction(BID, IID, LOC, "call"),
is_X_call_instruction(FNAME, IID),
block(FID, BID, _),
INPUT_ID = 0,
userinput(FNAME, INPUT_ID, "=", _),
get_size_of_userinput(SIZE, IID, FNAME, INPUT_ID),
CAT = cat("userinput_", to_string(SIZE))
.



//case memequals
taintlocation(FID, LOC, TYPE, CAT) :-
taintlocation(FID2, LOC2, TYPE, CAT),
memequals(FID, LOC, FID2, LOC2)
.

//load or getelementptr from userinput ==> is also userinput

// load instruction
taintlocation(FID, LOC, TYPE, CAT) :-
instruction(BID, IID, VREG, OPC), block(FID, BID, _),
OPC = "load",
VREG != "%-1",
LOC = VREG,
get_first_operand(IID, TYPE),
//ensure it does contain user input:
get_third_operand(IID, LOADEDLOC),
taintlocation(FID, LOADEDLOC, _, CAT)
.

// getelementptr instruction
taintlocation(FID, LOC, TYPE, CAT) :-
instruction(BID, IID, VREG, OPC), block(FID, BID, _),
OPC = "getelementptr",
LOC = VREG,
TYPE = "unknown",
//ensure it does contain user input:
get_first_operand(IID, DATAOBJ),
taintlocation(FID, DATAOBJ, _, CAT)
.
/*
//TODO: check if i am useful
//tainted->x ==> x is also tainted
taintlocation(FID2, LOC2, TYPE, CAT) :-
points_to(FID, LOC, FID2, LOC2),
taintlocation(FID, LOC, _, _),
TYPE = "unknown", CAT = "userinput"
.
*/

//library mode (=libmode)

//libmode: all function arguments that are pointer may contain userinput
taintlocation(FID, LOC, TYPE, CAT) :-
Config_LibraryMode(1),
function(FID, _, "define", _), //only defined functions
argument(FID, _, LOC, TYPE),
is_pointer(TYPE),
SIZE = MAXINT,
CAT = cat("userinput_", to_string(SIZE))
.

//libmode: all public available globals that are pointers may contain userinput
taintlocation(FID, LOC, TYPE, CAT) :-
Config_LibraryMode(1),
global(LOC, GT, TYPE, _, _),
is_pointer(TYPE),
is_external_global_type(GT), //these globals could be written from outside the library, thus may contain userinput
FID = -1,
SIZE = MAXINT,
CAT = cat("userinput_", to_string(SIZE))
.


//helper functions

//helper to get size info for limited or unlimited userinput
.decl get_size_of_userinput(size: number, instructionid: _instructionid, fname: symbol, argid_relative: number)
.output get_size_of_userinput

//case unlimited (equal)
get_size_of_userinput(SIZE, IID, FNAME, ARGID_REL) :-
userinput(FNAME, ARGID_REL, "=", LIMIT),
get_function_for_call_instruction(FNAME, IID),
LIMIT = 0,
SIZE = MAXINT
.

//case unlimited (following)
get_size_of_userinput(SIZE, IID, FNAME, ARGID_REL) :-
userinput(FNAME, ARGID_REL_START, "+", LIMIT),
get_function_for_call_instruction(FNAME, IID),
ARGID_REL >= ARGID_REL_START,
get_num_of_arguments_by_fname(ARGNUM, FNAME),
ARGID_REL < ARGNUM+1,
anumber(ARGID_REL),
LIMIT = 0,
SIZE = MAXINT
.

//case unlimited main (which is never called)
get_size_of_userinput(SIZE, IID, FNAME, ARGID_REL) :-
SIZE = MAXINT,
FNAME = "main",
anumber(ARGID_REL),
get_num_of_arguments_by_fname(ARGNUM, FNAME),
ARGID_REL < ARGNUM+1,
ARGID_REL > 0,
IID = -1
.

//case limited: fgets
get_size_of_userinput(SIZE, IID, FNAME, ARGID_REL) :-
userinput(FNAME, ARGID_REL, _, LIMIT),
block(FID, BID, _),
instruction(BID, IID, _, _),
LIMIT = 1,
is_call_instruction(IID),
get_function_for_call_instruction(CALLEDFNAME, IID),
CALLEDFNAME = FNAME, FNAME = "fgets",
get_second_operand(IID, N),
get_int_by_vreg(SIZE, FID, N)
.

//case limited: default (not following)
get_size_of_userinput(SIZE, IID, FNAME, ARGID_REL) :-
userinput(FNAME, ARGID_REL, _, LIMIT),
get_function_for_call_instruction(FNAME, IID),
LIMIT = 1,
SIZE = -1,
FNAME != "fgets"
.


//determine if taintlocation may contain direct userinput and if so also return category
.decl is_memloc_with_direct_userinput(functionid: _functionid, location: symbol, memcategory: _memcategory)

is_memloc_with_direct_userinput(FID, LOC, CAT) :-
taintlocation(FID, LOC, _, CAT),
is_memcat_userinput_str(CAT)
.

is_memloc_with_direct_userinput(FID, LOC, CAT) :-
memequals(FID, LOC, FID2, LOC2),
taintlocation(FID2, LOC2, _, CAT),
is_memcat_userinput_str(CAT)
.

//determine if given string is a valid userinput memlocation of the type "userinput_X"
.decl is_memcat_userinput_str(inp: symbol)
//.output is_memcat_userinput_str
is_memcat_userinput_str(STR) :- taintlocation(_, _, _, STR), match("userinput_.*", STR).


//checks if given location may contain direct, as well as transitioning userinput
.decl is_memloc_with_userinput(functionid: _functionid, location: symbol)
//.output is_memloc_with_userinput
//case direct user input
is_memloc_with_userinput(FID, LOC) :-
is_memloc_with_direct_userinput(FID, LOC, _)
.
//case transitioning user input
is_memloc_with_userinput(FID, LOC) :-
transitions_userinput_to(FID, FROM, LOC),
is_memloc_with_userinput(FID, FROM).

//case memequals
is_memloc_with_userinput(FID, LOC) :-
memequals(FID, LOC, FID2, LOC2),
is_memloc_with_userinput(FID2, LOC2).

//case points-to
is_memloc_with_userinput(FID, LOC) :-
points_to(FID, LOC, FID2, LOC2),
is_memloc_with_userinput(FID2, LOC2).


//an edge FROM->TO describes that userinput in FROM may spill into TO
.decl transitions_userinput_to(functionid: _functionid, memlocationFrom: symbol, memlocationTo: symbol)
//.output transitions_userinput_to
//case: transition userinput from argument to return value
transitions_userinput_to(FID, FROM, TO) :-
userinput_transitioning_function(FNAME, IN, OUT), OUT=0,
block(FID, BID, _),
instruction(BID, IID, TO, _),
is_X_call_instruction(FNAME, IID),
get_ith_operand(IID, IN, FROM)
.

//case: transition userinput from argument to argument
transitions_userinput_to(FID, FROM, TO) :-
userinput_transitioning_function(FNAME, IN, OUT), OUT>0, IN>0,
block(FID, BID, _),
instruction(BID, IID, _, _),
is_X_call_instruction(FNAME, IID),
get_ith_operand(IID, IN, FROM),
get_ith_operand(IID, OUT, TO)
.



//states which function may forward userinput to other functions
.decl userinput_transitioning_function(functionname: symbol, inWithUserinput: number, out: number)
//string.h accorging to https://www.cplusplus.com/reference/cstring/
userinput_transitioning_function("strcpy", 2, 1).
userinput_transitioning_function("strncpy", 2, 1).
userinput_transitioning_function("memcpy", 2, 1).
userinput_transitioning_function("memmove", 2, 1).
userinput_transitioning_function("strcat", 2, 1).
userinput_transitioning_function("strncat", 2, 1).
userinput_transitioning_function("strxfrm", 2, 1).
userinput_transitioning_function("memchr", 1, 0).
userinput_transitioning_function("strchr", 1, 0).
userinput_transitioning_function("strpbrk", 1, 0).
userinput_transitioning_function("strrchr", 1, 0).
userinput_transitioning_function("strstr", 1, 0).
userinput_transitioning_function("strtok", 1, 0).
