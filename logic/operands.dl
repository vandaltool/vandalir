//operand instructions

//is given operand a vreg
.decl is_vreg(type: symbol)
is_vreg(T) :- contains("%", T), opval(T),
strlen(T) > 0,
SUBSTR = substr(T, 1, strlen(T)), !contains("%", SUBSTR).

//is given operand a struct
.decl is_struct(type: symbol)
is_struct(T) :- struct(_,T,_).

//is pointer to a struct
.decl is_structpointer(type: symbol)
is_structpointer(T) :- strlen(T) > 0, substr(T, 0, 8) = "%struct.", is_pointer(T).

//is given operand a multidimensional array
.decl is_multidimensional(type: symbol)
is_multidimensional(T) :- contains("x", T), opval(T).

.decl is_inttype(type: symbol)
is_inttype("i32").
is_inttype("i64").

//returns fid and -1
.decl fid_or_none(value: number, functionid: _functionid)
fid_or_none(VAL, FID) :- function(FID, _, _, _), VAL=FID.
fid_or_none(VAL, FID) :- function(FID, _, _, _), VAL=-1.

//is given operand a concatenated memory location, used with arrays/structs
//maximal depth currently: 3
//.decl is_concatenated_location(type: symbol)
//is_concatenated_location(T) :- is_vreg(X), anumber(NUM), T = cat(cat(X, "."), to_string(NUM)).
//is_concatenated_location(T) :- is_concatenated_location(X), anumber(NUM), anumber(NUM2),
//T = cat(cat(cat(cat(X, "."), to_string(NUM)), "."), to_string(NUM2)).
//is_concatenated_location(T) :- is_concatenated_location(X), anumber(NUM), anumber(NUM2), anumber(NUM3),
//T = cat(cat(cat(cat(cat(cat(X, "."), to_string(NUM)), "."), to_string(NUM2)), "."), to_string(NUM3)).
//is_concatenated_location(T) :- is_concatenated_location(X), anumber(NUM), anumber(NUM2), anumber(NUM3), anumber(NUM4),
//T = cat(cat(cat(cat(cat(cat(cat(cat(X, "."), to_string(NUM)), "."), to_string(NUM2)), "."), to_string(NUM3)), "."), to_string(NUM4)).
//is_concatenated_location(T) :- is_concatenated_location(X), anumber(NUM), anumber(NUM2), anumber(NUM3), anumber(NUM4), anumber(NUM5),
//T = cat(cat(cat(cat(cat(cat(cat(cat(cat(cat(X, "."), to_string(NUM)), "."), to_string(NUM2)), "."), to_string(NUM3)), "."), to_string(NUM4)), "."), to_string(NUM5)).

//is location either a vreg or a concatenated location
//.decl is_vreg_or_concatenated_location(type: symbol)
//is_vreg_or_concatenated_location(T) :- is_vreg(T).
//is_vreg_or_concatenated_location(T) :- is_concatenated_location(T).

//is given operand a global
.decl is_global(type: symbol)
is_global(T) :- contains("@", T), opval(T),
strlen(T) > 0,
SUBSTR = substr(T, 1, strlen(T)), !contains("@", SUBSTR).

//is given operand a global str
.decl is_global_str(type: symbol)
is_global_str(T) :- global(T, _, TYPE, _, _), TYPE = "i8".

//is given operand numeric (aka is not a string)
.decl is_numeric(type: symbol)
is_numeric(VAL) :- opval(VAL),
!contains(":", VAL), !contains("%", VAL), !contains("[", VAL), !contains("]", VAL),
!contains("(", VAL), !contains(")", VAL), !contains("'", VAL), !contains(" ", VAL),
!contains("a", VAL), !contains("b", VAL), !contains("c", VAL), !contains("d", VAL),
!contains("e", VAL), !contains("f", VAL), !contains("g", VAL), !contains("h", VAL),
!contains("i", VAL), !contains("j", VAL), !contains("k", VAL), !contains("l", VAL),
!contains("m", VAL), !contains("n", VAL), !contains("o", VAL), !contains("p", VAL),
!contains("q", VAL), !contains("r", VAL), !contains("s", VAL), !contains("t", VAL),
!contains("u", VAL), !contains("v", VAL), !contains("w", VAL), !contains("x", VAL),
!contains("y", VAL), !contains("z", VAL), !contains("A", VAL), !contains("B", VAL),
!contains("C", VAL), !contains("D", VAL), !contains("E", VAL), !contains("F", VAL),
!contains("G", VAL), !contains("H", VAL), !contains("I", VAL), !contains("J", VAL),
!contains("K", VAL), !contains("L", VAL), !contains("M", VAL), !contains("N", VAL),
!contains("O", VAL), !contains("P", VAL), !contains("Q", VAL), !contains("R", VAL),
!contains("S", VAL), !contains("T", VAL), !contains("U", VAL), !contains("V", VAL),
!contains("W", VAL), !contains("X", VAL), !contains("Y", VAL), !contains("Z", VAL),
!contains("{", VAL), !contains("}", VAL), !contains("/", VAL), !contains("_", VAL),
!contains("<", VAL), !contains(">", VAL), !contains("*", VAL),
strlen(VAL)<=9, strlen(VAL)>0 //ensure it fits into maxint
.
//is_numeric(VAL) :- anumber(VAL2), VAL = to_string(VAL2).

//is given operand a pointer
.decl is_pointer(type: symbol)
is_pointer(T) :- pointer_level(T, LVL), LVL > 0.

//is given operand either a virtual register, global or concatenated
.decl concatenated(functionid: _functionid, location: symbol)
//.output concatenated(delimiter = ",")
concatenated(FID, LOC) :- is_vreg(LOC), instruction(BID, _, LOC, _), block(FID, BID, _).
concatenated(FID, LOC) :- memlocation(FID, LOC, _, _).
concatenated(FID, LOC) :- function(FID, _, _, _), is_global(LOC).
concatenated(FID, LOC) :- FID = -1, is_global(LOC).

//(first) part of a type
.decl part_operand(type: symbol)
//.output part_operand(delimiter=",")
part_operand(TYPE) :- type(TYPE).
part_operand(TYPE) :- TYPE=substr(FULLTYPE, 0, I), type(FULLTYPE), anumber(I), I>0, I<=strlen(FULLTYPE).


//get level of pointer (or pointer to pointer, etc.)
.decl pointer_level(type: symbol, level: number)
//.output pointer_level(delimiter=",")
pointer_level(TYPE, LVL) :- part_operand(TYPE), LVL = @get_num_seperators(TYPE, "*").