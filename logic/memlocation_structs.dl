//structAll Elements

//stack allocations of struct (all element), when a single struct is allocated
memlocation(FID, LOC, TYPE, CAT) :-
instruction(BID, IID, LOC, OPC), block(FID, BID, _),
!is_alloca_multidimensional(IID),
OPC = "alloca",
get_first_operand(IID, BASETYPE), TYPE = cat(BASETYPE,"*"),
get_second_operand(IID, SIZE),
is_numeric(SIZE), to_number(SIZE) = 1,
is_struct(BASETYPE),
CAT = cat("structAll~1~",BASETYPE).

//stack allocations of struct (all element) when an array of structs is allocated
memlocation(FID, LOCATION, TYPE, CAT) :-
instruction(BID, IID, LOC, OPC), block(FID, BID, _),
!is_alloca_multidimensional(IID),
OPC = "alloca",
get_first_operand(IID, BASETYPE), TYPE = cat(BASETYPE,"*"),
get_second_operand(IID, SIZE),
is_numeric(SIZE), to_number(SIZE) > 1,
is_struct(BASETYPE),
CAT = cat("structAll~1~", BASETYPE),
NUM >= 0, NUM < to_number(SIZE), anumber(NUM),
LOCATION = cat(cat(LOC, "."), to_string(NUM)).

//subelements of structs

//structIndex elements (no structs, no arrays)
memlocation(FID, LOCATION, TYPE, CAT) :-
memlocation(FID, LOCATIONSTRUCT, _, CATSTRUCT),
STRUCTALL = substr(CATSTRUCT, 0, 10),
STRUCTALL = "structAll~",
VALUES = substr(CATSTRUCT, 10, strlen(CATSTRUCT)),
STRUCTNAME = substr(VALUES, 2, strlen(VALUES)),
TYPE = cat(BASETYPE,"*"),
struct(SID, STRUCTNAME, _),
structoperand(SID, OPID, BASETYPE, OPSIZE),
!is_struct(BASETYPE),
!is_multidimensional(OPSIZE),
to_number(OPSIZE) = 1,
get_all_getelementptr_indices(OPID), //limit evaluated indices to those used by getelemeptr
LOCATION = cat(cat(LOCATIONSTRUCT, "."), to_string(OPID)),
CAT = "structIndex"
.

//structIndex elements, that are structs => spawn structAll
memlocation(FID, LOCATION, TYPE, CAT) :-
memlocation(FID, LOCATIONSTRUCT, _, CATSTRUCT),
STRUCTALL = substr(CATSTRUCT, 0, 10),
STRUCTALL = "structAll~",
VALUES = substr(CATSTRUCT, 10, strlen(CATSTRUCT)),
STRUCTNAME = substr(VALUES, 2, strlen(VALUES)),
TYPE = cat(BASETYPE,"*"),
struct(SID, STRUCTNAME, _),
structoperand(SID, OPID, BASETYPE, OPSIZE),
is_struct(BASETYPE),
!is_multidimensional(OPSIZE),
to_number(OPSIZE) = 1,
get_all_getelementptr_indices(OPID), //limit evaluated indices to those used by getelemeptr
LOCATION = cat(cat(LOCATIONSTRUCT, "."), to_string(OPID)),
CAT = cat("structAll~1~", BASETYPE)
.

//structIndex elements, that are arrays => spawn arrayAll
memlocation(FID, LOCATION, TYPE, CAT) :-
memlocation(FID, LOCATIONSTRUCT, _, CATSTRUCT),
STRUCTALL = substr(CATSTRUCT, 0, 10),
STRUCTALL = "structAll~",
VALUES = substr(CATSTRUCT, 10, strlen(CATSTRUCT)),
STRUCTNAME = substr(VALUES, 2, strlen(VALUES)),
struct(SID, STRUCTNAME, _),
structoperand(SID, OPID, BASETYPE, OPSIZE),
get_xth_entry_in_separated_str(SIZE, 1, _, OPSIZE),//get size of current array dimension
to_number(SIZE) > 1,//it is an array
//is_multidimensional(OPSIZE),
get_all_getelementptr_indices(OPID),
TYPE = cat(BASETYPE,"*"),
OPIDSTR = to_string(OPID),
LOCATION = cat(LOCATIONSTRUCT, ".", OPIDSTR),
CAT = cat("arrayAll~",OPSIZE,"~",BASETYPE)
.


memlocation(FID, LOCATION, TYPE, CAT) :-
memlocation(FID, LOCATIONSTRUCT, _, CATSTRUCT),
STRUCTALL = substr(CATSTRUCT, 0, 10),
STRUCTALL = "structAll~",
VALUES = substr(CATSTRUCT, 10, strlen(CATSTRUCT)),
STRUCTNAME = substr(VALUES, 2, strlen(VALUES)),
TYPE = cat(BASETYPE,"*"),
struct(SID, STRUCTNAME, _),
structoperand(SID, OPID, BASETYPE, OPSIZE),
!is_struct(BASETYPE),
!is_multidimensional(OPSIZE),
to_number(OPSIZE) = 1,
get_all_getelementptr_indices(OPID), //limit evaluated indices to those used by getelemeptr
LOCATION = cat(cat(LOCATIONSTRUCT, "."), to_string(OPID)),
CAT = "structIndex"
.

//subelements of arrays

//case only 1-dim array, not a struct => spawn arrayIndex elements
memlocation(FID, LOCATION, TYPE, CAT) :-
memlocation_catstr_subset(FID, LOCSTRUCT, CATSTRUCT),
ARRAYALL = substr(CATSTRUCT, 0, 9),
ARRAYALL = "arrayAll~",
VALUES = substr(CATSTRUCT, 9, strlen(CATSTRUCT)),
SIZESTR = substr(VALUES, 0, @get_before(VALUES, "~")),
TYPE = cat(BASETYPE,"*"),
BASETYPE = @get_behind(VALUES, "~"),
!is_struct(BASETYPE),
LOCATION = cat(LOCSTRUCT, ".", ISTR),
ISTR = to_string(I),
is_numeric(SIZE),
I >= 0, I < to_number(SIZE),
get_all_getelementptr_indices(I),
ARRAYLEVEL = @get_num_seperators(SIZESTR, "x"),
ARRAYLEVEL = 0,
get_xth_entry_in_separated_str(SIZE, 1, _, SIZESTR),
CAT = "arrayIndex".

//case only 1-dim array, which contains a struct => spawn structAll element
memlocation(FID, LOCATION, TYPE, CAT) :-
memlocation_catstr_subset(FID, LOCSTRUCT, CATSTRUCT),
ARRAYALL = substr(CATSTRUCT, 0, 9),
ARRAYALL = "arrayAll~",
VALUES = substr(CATSTRUCT, 9, strlen(CATSTRUCT)),
SIZESTR = substr(VALUES, 0, @get_before(VALUES, "~")),
TYPE = cat(BASETYPE,"*"),
BASETYPE = @get_behind(VALUES, "~"),
is_struct(BASETYPE),
LOCATION = cat(LOCSTRUCT, ".", ISTR),
ISTR = to_string(I),
is_numeric(SIZE),
I >= 0, I < to_number(SIZE),
get_all_getelementptr_indices(I),
ARRAYLEVEL = @get_num_seperators(SIZESTR, "x"),
ARRAYLEVEL = 0,
get_xth_entry_in_separated_str(SIZE, 1, _, SIZESTR),
CAT = cat("structAll~1~",BASETYPE).

//case multi-dim array => spawn additional arrayAll Elements
memlocation(FID, LOCATION, TYPE, CAT) :-
memlocation_catstr_subset(FID, LOCSTRUCT, CATSTRUCT),
ARRAYALL = substr(CATSTRUCT, 0, 9),
ARRAYALL = "arrayAll~",
VALUES = substr(CATSTRUCT, 9, strlen(CATSTRUCT)),
SIZESTR = substr(VALUES, 0, @get_before(VALUES, "~")),
TYPE = cat(BASETYPE,"*"),
BASETYPE = @get_behind(VALUES, "~"),
LOCATION = cat(LOCSTRUCT, ".", ISTR),
ISTR = to_string(I),
is_numeric(SIZE),
I >= 0, I < to_number(SIZE),
get_all_getelementptr_indices(I),
ARRAYLEVEL = @get_num_seperators(SIZESTR, "x"),
ARRAYLEVEL > 0,
get_xth_entry_in_separated_str(SIZE, 1, _, SIZESTR),
RESIDUAL = @get_behind(SIZESTR, "x"),
CAT = cat("arrayAll~",RESIDUAL,"~",BASETYPE).



//helper relations

//helper
.decl get_xth_entry_in_separated_str(res: symbol, i: number, string: symbol, origstring: symbol)
//base
get_xth_entry_in_separated_str(RES, I, STR, OSTR) :-
is_numeric(RES),
I = 1,
contains("x", STR),
RES = substr(STR, 0, @get_before(STR, "x")),
//RES = STR,
STR = OSTR,
opval(STR).
//recursion


get_xth_entry_in_separated_str(RES, I, STR, OSTR) :-
is_numeric(RES),
I > 1, anumber(I),
contains("x", STROLD),
STR = @get_behind(STROLD, "x"),
RES = substr(STR, 0, @get_before(STR, "x")),
get_xth_entry_in_separated_str(_, I-1, STROLD, OSTR)
.

get_xth_entry_in_separated_str(RES, I, STR, OSTR) :-
is_numeric(RES),
I = 1,
!contains("x", STR),
RES = STR,
STR = OSTR,
opval(STR).


.decl memlocation_catstr_subset(functionid: _functionid, structvreg: symbol, category: symbol)
memlocation_catstr_subset(FID, LOCSTRUCT, CATSTRUCT) :-
memlocation(FID, LOCSTRUCT, _, CATSTRUCT),
strlen(CATSTRUCT) > 9.